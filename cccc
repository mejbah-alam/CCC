% Setting up the document class
\documentclass[a4paper,8pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{geometry}
\geometry{margin=1in}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{amsmath}
\usepackage{parskip}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{enumitem}
\usepackage{hyperref}
\usepackage{titlesec}
\usepackage{tocloft}
\usepackage{ulem}

% Configuring the listings package for C code
\lstset{
    language=C++,
    basicstyle=\ttfamily\small,
    keywordstyle=\color{blue}\bfseries,
    stringstyle=\color{red},
    commentstyle=\color{green!60!black}\itshape,
    numbers=none,
    showspaces=false,
    showstringspaces=false,
    frame=single,
    breaklines=true,
    breakatwhitespace=true,
    tabsize=4,
    captionpos=b
}

% Customizing the table of contents

\renewcommand{\cftsecfont}{\bfseries}
\renewcommand{\cftsubsecfont}{\itshape}
\renewcommand{\cftsubsubsecfont}{\itshape}

\renewcommand{\cftsubsecnumwidth}{5em}
\renewcommand{\cftsubsubsecnumwidth}{4.5em}
\renewcommand{\cftbeforesubsecskip}{5pt}
\renewcommand{\cftbeforesubsubsecskip}{5pt}

% Setting up fonts
\usepackage{utopia}

% Title and author
\title{C++ Programming Exercises}
\author{Compiled by Mejbah}
\date{May 7, 2025}

% Configuring hyperref to hide link borders
\hypersetup{
    hidelinks
}

\begin{document}

% Generating the title page
\maketitle

% Adding a table of contents
\tableofcontents

% Extra newpage causing additional page
\newpage

% Configuring page headers and footers
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{C++ Programming Exercises}
\fancyhead[R]{\thepage\ of \pageref{LastPage}}
\fancyfoot[C]{}

\setcounter{page}{1}

%Introduction
\section{Introduction}
This document provides C++ programs. Each program includes the source code and a brief description, presented on a separate page for clarity. Users can compile and run these programs using a C++ compiler (e.g., GCC) to observe the output. The programs are presented in the order specified in the exercise set.
\newpage


\section{Basic Programming Exercises}


\subsection{ASCII Value to ASCII Character}
\vspace{0.5cm}
\begin{lstlisting}[caption={ASCII Value to ASCII Character}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Enter Any ASCII Value: ";
    cin >> n;
    cout << "The ASCII Character is: " << char(n);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any ASCII Value: 65
The ASCII Character is: A
\end{verbatim}
\clearpage

\subsection{ASCII Character to ASCII Value}
\vspace{0.5cm}
\begin{lstlisting}[caption={ASCII Character to ASCII Value}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any ASCII Character: ";
    cin >> ch;
    cout << "The ASCII Value is: " << int(ch);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any ASCII Character: A
The ASCII Value is: 65
\end{verbatim}
\clearpage

\subsection{Lower Case to Upper Case}
\vspace{0.5cm}
\begin{lstlisting}[caption={Lower Case to Upper Case}]
#include <iostream>
using namespace std;
int main()
{
    char lower;
    cout << "Enter Any Lowercase Letter: ";
    cin >> lower;
    cout << "The Uppercase Letter: " << char(lower-32);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Lowercase Letter: a
The Uppercase Letter: A
\end{verbatim}
\clearpage

\subsection{Upper Case to Lower Case}
\vspace{0.5cm}
\begin{lstlisting}[caption={Upper Case to Lower Case}]
#include <iostream>
using namespace std;
int main()
{
    char Upper;
    cout << "Enter Any Uppercase Letter: ";
    cin >> Upper;
    cout << "The Lowercase Letter: " << char(Upper+32);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Uppercase Letter: A
The Lowercase Letter: a
\end{verbatim}
\clearpage

\subsection{Lower to Upper Case Using Library Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Lower to Upper Case Using Library Function}]
#include <iostream>
#include <cctype>
using namespace std;
int main()
{
    char lower, upper;
    cout << "Enter Any Lowercase Letter: ";
    cin >> lower;
    upper = toupper(lower);
    cout << "Uppercase Letter = " << upper;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Lowercase Letter: b
Uppercase Letter = B
\end{verbatim}
\clearpage

\subsection{Upper Case to Lower Case Using Library Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Upper Case to Lower Case Using Library Function}]
#include <iostream>
#include <cctype>
using namespace std;
int main()
{
    char lower, upper;
    cout << "Enter Any Uppercase Letter: ";
    cin >> upper;
    lower = tolower(upper);
    cout << "Lowercase Letter = " << lower;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Uppercase Letter: B
Lowercase Letter = b
\end{verbatim}
\clearpage

\subsection{Decimal to Octal}
\vspace{0.5cm}
\begin{lstlisting}[caption={Decimal to Octal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any Decimal Number: ";
    cin >> number;
    cout << "Octal number = " << oct << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Decimal Number: 10
Octal number = 12
\end{verbatim}
\clearpage

\subsection{Octal to Decimal}
\vspace{0.5cm}
\begin{lstlisting}[caption={Octal to Decimal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any Octal Number: ";
    cin >> oct >> number;
    cout << "Decimal number = " << dec << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Octal Number: 12
Decimal number = 10
\end{verbatim}
\clearpage

\subsection{Decimal to HexaDecimal}
\vspace{0.5cm}
\begin{lstlisting}[caption={Decimal to HexaDecimal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any Decimal Number: ";
    cin >> number;
    cout << "HexaDecimal number = " << hex << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Decimal Number: 255
HexaDecimal number = ff
\end{verbatim}
\clearpage

\subsection{HexaDecimal to Decimal}
\vspace{0.5cm}
\begin{lstlisting}[caption={HexaDecimal to Decimal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any HexaDecimal Number: ";
    cin >> hex >> number;
    cout << "Decimal number = " << dec << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any HexaDecimal Number: ff
Decimal number = 255
\end{verbatim}
\clearpage

\subsection{Octal to HexaDecimal}
\vspace{0.5cm}
\begin{lstlisting}[caption={Octal to HexaDecimal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any Octal Number: ";
    cin >> oct >> number;
    cout << "HexaDecimal Number = " << hex << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Octal Number: 12
HexaDecimal Number = a
\end{verbatim}
\clearpage

\subsection{HexaDecimal to Octal}
\vspace{0.5cm}
\begin{lstlisting}[caption={HexaDecimal to Octal}]
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter Any HexaDecimal Number: ";
    cin >> hex >> number;
    cout << "Octal Number = " << oct << number;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any HexaDecimal Number: a
Octal Number = 12
\end{verbatim}
\clearpage


\section{Arithmetic Operator Programming Exercises}

\subsection{Input/Output of All Basic Data Types}
\vspace{0.5cm}
\begin{lstlisting}[caption={Input/Output of All Basic Data Types}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int integer;
    float float_number;
    double double_number;
    char character;
    long long_number;
    cout << "Enter an integer: ";
    cin >> integer;
    cout << "Enter a float: ";
    cin >> float_number;
    cout << "Enter a double: ";
    cin >> double_number;
    cout << "Enter a character: ";
    cin >> character;
    cout << "Enter a long integer: ";
    cin >> long_number;
    cout << "\nInteger: " << integer << "\n";
    cout << "Float: " << fixed << setprecision(6) << float_number << "\n";
    cout << "Double: " << fixed << setprecision(6) << double_number << "\n";
    cout << "Character: " << character << "\n";
    cout << "Long: " << long_number << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter an integer: 10
Enter a float: 3.14
Enter a double: 2.71828
Enter a character: A
Enter a long integer: 123456

Integer: 10
Float: 3.140000
Double: 2.718280
Character: A
Long: 123456
\end{verbatim}
\newpage

\subsection{Sum of Two Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum of Two Numbers}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, sum;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    sum = num1 + num2;
    cout << "The Sum is: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 5 3
The Sum is: 8
\end{verbatim}
\newpage

\subsection{Sum \& Average of Two Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum \& Average of Two Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num1, num2, sum;
    float avg;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    sum = num1 + num2;
    cout << "The Sum is: " << sum << "\n";
    avg = (float)sum / 2;
    cout << "The Average is: " << fixed << setprecision(6) << avg << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 10 20
The Sum is: 30
The Average is: 15.000000
\end{verbatim}
\newpage

\subsection{All Arithmetic Operators}
\vspace{0.5cm}
\begin{lstlisting}[caption={All Arithmetic Operators}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    int sum = num1 + num2;
    cout << "The Sum is: " << sum << "\n";
    int sub = num1 - num2;
    cout << "The Sub is: " << sub << "\n";
    int mul = num1 * num2;
    cout << "The Mul is: " << mul << "\n";
    double div = (float)num1 / num2;
    int rem = num1 % num2;
    if (num2 != 0)
    {
        cout << "The Div is: " << fixed << setprecision(6) << div << "\n";
        cout << "The Rem is: " << rem << "\n";
    }
    else
    {
        cout << "Division and Modulus not possible\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 15 5
The Sum is: 20
The Sub is: 10
The Mul is: 75
The Div is: 3.000000
The Rem is: 0
\end{verbatim}
\newpage

\subsection{Sum of Three Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum of Three Numbers}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3, sum;
    cout << "Enter Three Numbers: ";
    cin >> num1 >> num2 >> num3;
    sum = num1 + num2 + num3;
    cout << "The Sum is: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Three Numbers: 5 10 15
The Sum is: 30
\end{verbatim}
\newpage

\subsection{Sum \& Average of Three Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum \& Average of Three Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num1, num2, num3, sum;
    float average;
    cout << "Enter Three Numbers: ";
    cin >> num1 >> num2 >> num3;
    sum = num1 + num2 + num3;
    average = (float)sum / 3;
    cout << "The Sum is: " << sum << "\n";
    cout << "The Average is: " << fixed << setprecision(6) << average << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Three Numbers: 10 20 30
The Sum is: 60
The Average is: 20.000000
\end{verbatim}
\newpage

\subsection{Area of Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Triangle}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float base, height, area;
    cout << "Enter Base: ";
    cin >> base;
    cout << "Enter Height: ";
    cin >> height;
    area = 0.5 * base * height;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Base: 4
Enter Height: 5
The Area is: 10.000000
\end{verbatim}
\newpage

\subsection{Area of Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Triangle}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float base, height, area;
    cout << "Enter Base: ";
    cin >> base;
    cout << "Enter Height: ";
    cin >> height;
    area = 0.5 * base * height;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Base: 4
Enter Height: 5
The Area is: 10.000000
\end{verbatim}
\newpage

\subsection{Area of Triangle Using Sides}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Triangle Using Sides}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    float a, b, c, s, area;
    cout << "The Sides of Triangle are: ";
    cin >> a >> b >> c;
    s = (a + b + c) / 2;
    area = sqrt(s * (s - a) * (s - b) * (s - c));
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Sides of Triangle are: 3 4 5
The Area is: 6.000000
\end{verbatim}
\newpage

\subsection{Diameter \& Circumference of Circle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Diameter \& Circumference of Circle}]
#include <iostream>
#include <iomanip>
using namespace std;
#define PI 3.14159
int main()
{
    float radius, diameter, circumference;
    cout << "Enter Radius: ";
    cin >> radius;
    diameter = 2 * radius;
    circumference = 2 * PI * radius;
    cout << "Diameter: " << fixed << setprecision(2) << diameter << "\n";
    cout << "Circumference: " << fixed << setprecision(2) << circumference << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Radius: 4
Diameter: 8.00
Circumference: 25.13
\end{verbatim}
\newpage

\subsection{Area of Circle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Circle}]
#include <iostream>
#include <iomanip>
using namespace std;
#define PI 3.14159
int main()
{
    float radius, area;
    cout << "Enter Radius: ";
    cin >> radius;
    area = PI * radius * radius;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Radius: 5
The Area is: 78.539750
\end{verbatim}
\newpage

\subsection{Area of Circle Using Math.h}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Circle Using Math.h}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    float radius, area;
    cout << "Enter Radius: ";
    cin >> radius;
    area = M_PI * radius * radius;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Radius: 5
The Area is: 78.539816
\end{verbatim}
\newpage

\subsection{Perimeter of Rectangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Perimeter of Rectangle}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float length, width, perimeter;
    cout << "Enter Length & Width of Rectangle: ";
    cin >> length >> width;
    perimeter = 2 * (length + width);
    cout << "Perimeter is: " << fixed << setprecision(2) << perimeter << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Length & Width of Rectangle: 5 3
Perimeter is: 16.00
\end{verbatim}
\newpage

\subsection{Area of Rectangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Rectangle}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float length, width, area;
    cout << "Enter Length: ";
    cin >> length;
    cout << "Enter Width: ";
    cin >> width;
    area = length * width;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Length: 6
Enter Width: 4
The Area is: 24.000000
\end{verbatim}
\newpage

\subsection{Area of Parallelogram}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Parallelogram}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float base, height, area;
    cout << "Enter Base: ";
    cin >> base;
    cout << "Enter Height: ";
    cin >> height;
    area = base * height;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Base: 6
Enter Height: 4
The Area is: 24.000000
\end{verbatim}
\newpage

\subsection{Area of Square}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Square}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float side, area;
    cout << "Enter Side: ";
    cin >> side;
    area = side * side;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Side: 6
The Area is: 36.000000
\end{verbatim}
\newpage

\subsection{Area of Rhombus}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Rhombus}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float diag1, diag2, area;
    cout << "Enter Diagonal 01: ";
    cin >> diag1;
    cout << "Enter Diagonal 02: ";
    cin >> diag2;
    area = (diag1 * diag2) / 2;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Diagonal 01: 6
Enter Diagonal 02: 4
The Area is: 12.000000
\end{verbatim}
\newpage

\subsection{Area of Trapezium}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of Trapezium}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float para1, para2, height, area;
    cout << "Enter Parallel Side 01: ";
    cin >> para1;
    cout << "Enter Parallel Side 02: ";
    cin >> para2;
    cout << "Enter Height: ";
    cin >> height;
    area = (para1 + para2) * height / 2;
    cout << "The Area is: " << fixed << setprecision(6) << area;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Parallel Side 01: 10
Enter Parallel Side 02: 8
Enter Height: 6
The Area is: 54.000000
\end{verbatim}
\newpage

\subsection{Volume \& Surface Area of Cube}
\vspace{0.5cm}
\begin{lstlisting}[caption={Volume \& Surface Area of Cube}]
#include <iostream>
#include <iomanip>
using namespace std;
int main() {
    float side, volume, surface;
    cout << "Enter Side: ";
    cin >> side;
    volume = side * side * side;
    surface = 6 * side * side;
    cout << "Volume: " << fixed << setprecision(2) << volume << "\n";
    cout << "Surface Area: " << fixed << setprecision(2) << surface << "\n";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Side: 5
Volume: 125.00
Surface Area: 150.00
\end{verbatim}
\newpage

\subsection{Volume \& Surface Area of Cuboid}
\vspace{0.5cm}
\begin{lstlisting}[caption={Volume \& Surface Area of Cuboid}]
#include <iostream>
#include <iomanip>
using namespace std;
int main() {
    float length, width, height, volume, surface;
    cout << "Enter Length: ";
    cin >> length;
    cout << "Enter Width: ";
    cin >> width;
    cout << "Enter Height: ";
    cin >> height;
    volume = length * width * height;
    surface = 2 * (length * width + width * height + height * length);
    cout << "Volume: " << fixed << setprecision(2) << volume << "\n";
    cout << "Surface Area: " << fixed << setprecision(2) << surface << "\n";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Length: 5
Enter Width: 3
Enter Height: 2
Volume: 30.00
Surface Area: 62.00
\end{verbatim}
\newpage

\subsection{Volume \& Surface Area of Cone}
\vspace{0.5cm}
\begin{lstlisting}[caption={Volume \& Surface Area of Cone}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
#define PI 3.14159
int main() {
    float radius, height, slant, volume, surface;
    cout << "Enter Radius: ";
    cin >> radius;
    cout << "Enter Height: ";
    cin >> height;
    slant = sqrt(radius * radius + height * height);
    volume = (PI * radius * radius * height) / 3;
    surface = PI * radius * (radius + slant);
    cout << "Volume: " << fixed << setprecision(2) << volume << "\n";
    cout << "Surface Area: " << fixed << setprecision(2) << surface << "\n";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Radius: 3
Enter Height: 4
Volume: 37.70
Surface Area: 75.40
\end{verbatim}
\newpage

\subsection{Volume \& Surface Area of Cylinder}
\vspace{0.5cm}
\begin{lstlisting}[caption={Volume \& Surface Area of Cylinder}]
#include <iostream>
#include <iomanip>
using namespace std;
#define PI 3.14159
int main() {
    float radius, height, volume, surface;
    cout << "Enter Radius: ";
    cin >> radius;
    cout << "Enter Height: ";
    cin >> height;
    volume = PI * radius * radius * height;
    surface = 2 * PI * radius * (radius + height);
    cout << "Volume: " << fixed << setprecision(2) << volume << "\n";
    cout << "Surface Area: " << fixed << setprecision(2) << surface << "\n";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Radius: 3
Enter Height: 5
Volume: 141.37
Surface Area: 150.80
\end{verbatim}
\newpage

\subsection{Volume \& Surface Area of Sphere}
\vspace{0.5cm}
\begin{lstlisting}[caption={Volume \& Surface Area of Sphere}]
#include <iostream>
#include <iomanip>
using namespace std;
#define PI 3.14159
int main()
{
    float radius, volume, surface;
    cout << "Enter Radius: ";
    cin >> radius;
    volume = (4.0 / 3.0) * PI * radius * radius * radius;
    surface = 4 * PI * radius * radius;
    cout << "Volume: " << fixed << setprecision(2) << volume << "\n";
    cout << "Surface Area: " << fixed << setprecision(2) << surface << "\n";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Radius: 3
Volume: 113.10
Surface Area: 113.10
\end{verbatim}
\newpage

\subsection{Celsius to Fahrenheit}
\vspace{0.5cm}
\begin{lstlisting}[caption={Celsius to Fahrenheit}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float C, F;
    cout << "Enter Celsius: ";
    cin >> C;
    F = ((9 * C / 5) + 32);
    cout << "Temperature in Fahrenheit is: " << fixed << setprecision(6) << F;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Celsius: 25
Temperature in Fahrenheit is: 77.000000
\end{verbatim}
\newpage

\subsection{Fahrenheit to Celsius}
\vspace{0.5cm}
\begin{lstlisting}[caption={Fahrenheit to Celsius}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float C, F;
    cout << "Enter Fahrenheit: ";
    cin >> F;
    C = ((F - 32) * 5) / 9;
    cout << "Temperature in Celsius is: " << fixed << setprecision(6) << C;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Fahrenheit: 77
Temperature in Celsius is: 25.000000
\end{verbatim}
\newpage

\subsection{Centimeter to Meter \& Kilometer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Centimeter to Meter \& Kilometer}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float cm, meter, km;
    cout << "Enter Length in Centimeters: ";
    cin >> cm;
    meter = cm / 100;
    km = cm / 100000;
    cout << "Length in Meters is: " << fixed << setprecision(2) << meter << "\n";
    cout << "Length in Kilometers is: " << fixed << setprecision(5) << km << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Length in Centimeters: 150000
Length in Meters is: 1500.00
Length in Kilometers is: 1.50000
\end{verbatim}
\newpage

\subsection{Convert Days to Years, Weeks \& Days}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Days to Years, Weeks \& Days}]
#include <iostream>
using namespace std;
int main()
{
    int days, years, weeks, rem_days;
    cout << "Enter number of days: ";
    cin >> days;
    years = days / 365;
    weeks = (days % 365) / 7;
    rem_days = (days % 365) % 7;
    cout << "Years: " << years << "\n";
    cout << "Weeks: " << weeks << "\n";
    cout << "Days: " << rem_days << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter number of days: 400
Years: 1
Weeks: 5
Days: 0
\end{verbatim}
\newpage

\subsection{Number Swap With Temporary Variable}
\vspace{0.5cm}
\begin{lstlisting}[caption={Number Swap With Temporary Variable}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, temp;
    cout << "Before Swapping:\n";
    cout << "````````````````\n";
    cout << "Enter Number 01: ";
    cin >> num1;
    cout << "Enter Number 02: ";
    cin >> num2;
    temp = num1;
    num1 = num2;
    num2 = temp;
    cout << "\nAfter Swapping:\n";
    cout << "```````````````\n";
    cout << "Number 01: " << num1 << "\n";
    cout << "Number 02: " << num2;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Swapping:
````````````````
Enter Number 01: 10
Enter Number 02: 20

After Swapping:
```````````````
Number 01: 20
Number 02: 10
\end{verbatim}
\newpage

\subsection{Number Swap Without Temporary Variable}
\vspace{0.5cm}
\begin{lstlisting}[caption={Number Swap Without Temporary Variable}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Before Swapping:\n";
    cout << "````````````````\n";
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    num1 = num1 - num2;
    num2 = num1 + num2;
    num1 = num2 - num1;
    cout << "\nAfter Swapping:\n";
    cout << "```````````````\n";
    cout << "Number 01: " << num1 << "\n";
    cout << "Number 02: " << num2;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Swapping:
````````````````
Enter Number 01: 10
Enter Number 02: 20

After Swapping:
```````````````
Number 01: 20
Number 02: 10
\end{verbatim}
\newpage

\subsection{Quadratic Formula}
\vspace{0.5cm}
\begin{lstlisting}[caption={Quadratic Formula}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    double a, b, c, D, X1, X2;
    cout << "Enter the Value of a: ";
    cin >> a;
    cout << "Enter the Value of b: ";
    cin >> b;
    cout << "Enter the Value of c: ";
    cin >> c;
    D = (b * b) - (4 * a * c);
    if (D >= 0) {
        D = sqrt(D);
        X1 = (-b + D) / (2 * a);
        X2 = (-b - D) / (2 * a);
        cout << "The Value of X1: " << fixed << setprecision(6) << X1;
        cout << "The Value of X2: " << fixed << setprecision(6) << X2;
    } else {
        cout << "No real roots exist (negative discriminant)\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Value of a: 1
Enter the Value of b: -3
Enter the Value of c: 2
The Value of X1: 2.000000
The Value of X2: 1.000000
\end{verbatim}
\newpage

\subsection{Calculate Simple Interest}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Simple Interest}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    float principal, time, rate, simple_interest;
    cout << "Enter Principal: ";
    cin >> principal;
    cout << "Enter Time (years): ";
    cin >> time;
    cout << "Enter Rate (%): ";
    cin >> rate;
    simple_interest = (principal * time * rate) / 100;
    cout << "Simple Interest is: " << fixed << setprecision(2) << simple_interest << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Principal: 1000
Enter Time (years): 2
Enter Rate (%): 5
Simple Interest is: 100.00
\end{verbatim}
\newpage

\subsection{Calculate Compound Interest}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Compound Interest}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    float principal, time, rate, compound_interest, amount;
    cout << "Enter Principal: ";
    cin >> principal;
    cout << "Enter Time (years): ";
    cin >> time;
    cout << "Enter Rate (%): ";
    cin >> rate;
    amount = principal * pow((1 + rate / 100), time);
    compound_interest = amount - principal;
    cout << "Compound Interest: " << fixed << setprecision(2) << compound_interest << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Principal: 1000
Enter Time (years): 2
Enter Rate (%): 5
Compound Interest: 102.50
\end{verbatim}
\newpage

\subsection{Find the Size of int, float, double \& char}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find the Size of int, float, double \& char}]
#include <iostream>
using namespace std;
int main()
{
    cout << "Size of int: " << sizeof(int) << " bytes\n";
    cout << "Size of float: " << sizeof(float) << " bytes\n";
    cout << "Size of double: " << sizeof(double) << " bytes\n";
    cout << "Size of char: " << sizeof(char) << " bytes\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Size of int: 4 bytes
Size of float: 4 bytes
Size of double: 8 bytes
Size of char: 1 bytes
\end{verbatim}
\newpage

\subsection{Add Two Complex Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Add Two Complex Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
struct Complex
{
    float real;
    float imag;
};

int main()
{
    Complex num1, num2, sum;
    cout << "Enter Real & Imaginary Parts of First Complex Number: ";
    cin >> num1.real >> num1.imag;
    cout << "Enter Real & Imaginary Parts of Second Complex Number: ";
    cin >> num2.real >> num2.imag;
    sum.real = num1.real + num2.real;
    sum.imag = num1.imag + num2.imag;
    cout << "Sum is: " << fixed << setprecision(2) << sum.real << " + " << sum.imag << "i\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Real & Imaginary Parts of First Complex Number: 3.5 2.5
Enter Real & Imaginary Parts of Second Complex Number: 1.5 4.5
Sum is: 5.00 + 7.00i
\end{verbatim}
\newpage

\subsection{Print Current Date \& Time}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Current Date \& Time}]
#include <iostream>
#include <iomanip>
#include <ctime>
#include <sstream>
using namespace std;
int main()
{
    time_t rawtime;
    struct tm* timeinfo;
    time(&rawtime);
    timeinfo = localtime(&rawtime);
    stringstream ss;
    ss << put_time(timeinfo, "%Y-%m-%d %H:%M:%S");
    cout << "Current Date & Time: " << ss.str() << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Current Date & Time: 2025-05-10 12:34:56
\end{verbatim}
\newpage

\section{Mathematical Operator Programming Exercises}


\subsection{Value Of Absolute}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Absolute}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    int x, result;
    cout << "Enter the Number: ";
    cin >> x;
    result = abs(x);
    cout << "The Value of Absolute: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Number: -5
The Value of Absolute: 5
\end{verbatim}
\clearpage

\subsection{Value Of Square Root}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Square Root}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Number: ";
    cin >> x;
    result = sqrt(x);
    cout << "The Value of Square Root: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Number: 16
The Value of Square Root: 4
\end{verbatim}
\clearpage

\subsection{Value Of Power}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Power}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    int x, y;
    double result;
    cout << "Enter the Base: ";
    cin >> x;
    cout << "Enter the Power: ";
    cin >> y;
    result = pow(x, y);
    cout << "The Result is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Base: 2
Enter the Power: 3
The Result is: 8
\end{verbatim}
\clearpage

\subsection{Value Of Log}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Log}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = log(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 2.71828
The Answer is: 1
\end{verbatim}
\clearpage

\subsection{Value Of Log 10}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Log 10}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = log10(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 100
The Answer is: 2
\end{verbatim}
\clearpage

\subsection{Value Of Exponential Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Exponential Function}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = exp(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 1
The Answer is: 2.71828
\end{verbatim}
\clearpage

\subsection{Value Of Sine}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Sine}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = sin(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 0
The Answer is: 0
\end{verbatim}
\clearpage

\subsection{Value Of Cosine}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Cosine}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = cos(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 0
The Answer is: 1
\end{verbatim}
\clearpage

\subsection{Value Of Tangent}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Tangent}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = tan(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 0
The Answer is: 0
\end{verbatim}
\clearpage

\subsection{Value Of Round}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Round}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = round(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 3.6
The Answer is: 4
\end{verbatim}
\clearpage

\subsection{Value Of Trunc}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Trunc}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = trunc(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 3.7
The Answer is: 3
\end{verbatim}
\clearpage

\subsection{Value Of Ceiling}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Ceiling}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = ceil(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 3.2
The Answer is: 4
\end{verbatim}
\clearpage

\subsection{Value Of Floor}
\vspace{0.5cm}
\begin{lstlisting}[caption={Value Of Floor}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    double x, result;
    cout << "Enter the Value: ";
    cin >> x;
    result = floor(x);
    cout << "The Answer is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value: 3.7
The Answer is: 3
\end{verbatim}
\clearpage


\section{Assignment Operator Programming Exercises}


\subsection{All Assignment Operators}
\vspace{0.5cm}
\begin{lstlisting}[caption={All Assignment Operators}]
#include <iostream>
using namespace std;
int main()
{
    int a, b, c, d;
    cout << "Enter the Value of a: ";
    cin >> a;
    cout << "Enter the Value of b: ";
    cin >> b;
    cout << "Enter the Value of c: ";
    cin >> c;
    cout << "Enter the Value of d: ";
    cin >> d;
    a += 2;
    cout << "The Value of += is: " << a << endl;
    b -= 2;
    cout << "The Value of -= is: " << b << endl;
    c *= 2;
    cout << "The Value of *= is: " << c << endl;
    d /= 2;
    cout << "The Value of /= is: " << d << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Value of a: 10
Enter the Value of b: 20
Enter the Value of c: 30
Enter the Value of d: 40
The Value of += is: 12
The Value of -= is: 18
The Value of *= is: 60
The Value of /= is: 20
\end{verbatim}
\clearpage

\subsection{Unary Plus}
\vspace{0.5cm}
\begin{lstlisting}[caption={Unary Plus}]
#include <iostream>
using namespace std;
int main()
{
    int x, result;
    cout << "Enter the Integer: ";
    cin >> x;
    result = +x;
    cout << "The Unary Value is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Unary Value is: 5
\end{verbatim}
\clearpage

\subsection{Unary Minus}
\vspace{0.5cm}
\begin{lstlisting}[caption={Unary Minus}]
#include <iostream>
using namespace std;
int main()
{
    int x, result;
    cout << "Enter the Integer: ";
    cin >> x;
    result = -x;
    cout << "The Unary Value is: " << result << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Unary Value is: -5
\end{verbatim}
\clearpage

\subsection{Prefix Increment}
\vspace{0.5cm}
\begin{lstlisting}[caption={Prefix Increment}]
#include <iostream>
using namespace std;
int main()
{
    int X, Y;
    cout << "Enter the Integer: ";
    cin >> X;
    Y = ++X;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of Y: " << Y << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 6
The Value of Y: 6
\end{verbatim}
\clearpage

\subsection{Postfix Increment}
\vspace{0.5cm}
\begin{lstlisting}[caption={Postfix Increment}]
#include <iostream>
using namespace std;
int main()
{
    int X, Y;
    cout << "Enter the Integer: ";
    cin >> X;
    Y = X++;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of Y: " << Y << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 6
The Value of Y: 5
\end{verbatim}
\clearpage

\subsection{Prefix Decrement}
\vspace{0.5cm}
\begin{lstlisting}[caption={Prefix Decrement}]
#include <iostream>
using namespace std;
int main()
{
    int X, Y;
    cout << "Enter the Integer: ";
    cin >> X;
    Y = --X;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of Y: " << Y << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 4
The Value of Y: 4
\end{verbatim}
\clearpage

\subsection{Postfix Decrement}
\vspace{0.5cm}
\begin{lstlisting}[caption={Postfix Decrement}]
#include <iostream>
using namespace std;
int main()
{
    int X, Y;
    cout << "Enter the Integer: ";
    cin >> X;
    Y = X--;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of Y: " << Y << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 4
The Value of Y: 5
\end{verbatim}
\clearpage

\subsection{Increment \& Decrement (Sequence 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Increment \& Decrement (Sequence 1)}]
#include <iostream>
using namespace std;
int main()
{
    int X;
    cout << "Enter the Integer: ";
    cin >> X;
    cout << "The Value of X: " << X++ << endl;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of X: " << ++X << endl;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of X: " << X-- << endl;
    cout << "The Value of X: " << X << endl;
    cout << "The Value of X: " << --X << endl;
    cout << "The Value of X: " << X << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 5
The Value of X: 6
The Value of X: 7
The Value of X: 7
The Value of X: 7
The Value of X: 6
The Value of X: 5
The Value of X: 5
\end{verbatim}
\clearpage

\subsection{Increment \& Decrement (Sequence 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Increment \& Decrement (Sequence 2)}]
#include <iostream>
using namespace std;
int main()
{
    int X;
    cout << "Enter the Integer: ";
    cin >> X;
    cout << "The Value of X: " << X++ << endl;
    cout << "The Value of X: " << ++X << endl;
    cout << "The Value of X: " << X-- << endl;
    cout << "The Value of X: " << --X << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Integer: 5
The Value of X: 5
The Value of X: 7
The Value of X: 7
The Value of X: 5
\end{verbatim}
\clearpage


\section{If-Else Programming Exercises}


\subsection{Even or Odd Using If}
\vspace{0.5cm}
\begin{lstlisting}[caption={Even or Odd Using If}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter an Integer: ";
    cin >> num;
    if(num % 2 == 0)
        cout << "The Number is Even" << endl;
    if(num % 2 != 0)
        cout << "The Number is Odd" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Integer: 4
The Number is Even
\end{verbatim}
\clearpage

\subsection{Even or Odd Using If-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Even or Odd Using If-else}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter an Integer: ";
    cin >> num;
    if(num % 2 == 0)
        cout << "The Number is Even" << endl;
    else
        cout << "The Number is Odd" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Integer: 7
The Number is Odd
\end{verbatim}
\clearpage

\subsection{Positive or Negative Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Positive or Negative Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter an Integer: ";
    cin >> num;
    if(num > 0)
        cout << "The Number is Positive" << endl;
    else if(num < 0)
        cout << "The Number is Negative" << endl;
    else
        cout << "The Number is Zero" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Integer: -3
The Number is Negative
\end{verbatim}
\clearpage

\subsection{Largest of Two Numbers Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Two Numbers Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    if(num1 > num2)
        cout << "1st Number is Largest" << endl;
    else if(num2 > num1)
        cout << "2nd Number is Largest" << endl;
    else
        cout << "The Numbers are Equal" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st Number: 10
Enter 2nd Number: 20
2nd Number is Largest
\end{verbatim}
\clearpage

\subsection{Smallest of Two Numbers Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Two Numbers Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    if(num1 < num2)
        cout << "1st Number is Smallest" << endl;
    else if(num2 < num1)
        cout << "2nd Number is Smallest" << endl;
    else
        cout << "The Numbers are Equal" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st Number: 10
Enter 2nd Number: 20
1st Number is Smallest
\end{verbatim}
\clearpage

\subsection{Check a Number is Divisible by 5 \& 11}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Number is Divisible by 5 \& 11}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter an Integer: ";
    cin >> num;
    if((num % 5 == 0) && (num % 11 == 0))
        cout << num << " is divisible by 5 & 11" << endl;
    else
        cout << num << " is not divisible by 5 & 11" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Integer: 55
55 is divisible by 5 & 11
\end{verbatim}
\clearpage

\subsection{Grade Marks Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Grade Marks Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    float marks;
    cout << "Enter Your Marks: ";
    cin >> marks;
    if(marks >= 93)
        cout << "Your Grade is A" << endl;
    else if(marks >= 89)
        cout << "Your Grade is A-" << endl;
    else if(marks >= 86)
        cout << "Your Grade is B+" << endl;
    else if(marks >= 82)
        cout << "Your Grade is B" << endl;
    else if(marks >= 79)
        cout << "Your Grade is B-" << endl;
    else if(marks >= 75)
        cout << "Your Grade is C+" << endl;
    else if(marks >= 72)
        cout << "Your Grade is C" << endl;
    else if(marks >= 69)
        cout << "Your Grade is C-" << endl;
    else if(marks >= 65)
        cout << "Your Grade is D+" << endl;
    else if(marks >= 60)
        cout << "Your Grade is D" << endl;
    else
        cout << "Your Grade is F" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Your Marks: 85
Your Grade is B
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter a Letter: ";
    cin >> ch;
    if(ch == 'a' || ch == 'A')
        cout << ch << " is Vowel" << endl;
    else if(ch == 'e' || ch == 'E')
        cout << ch << " is Vowel" << endl;
    else if(ch == 'i' || ch == 'I')
        cout << ch << " is Vowel" << endl;
    else if(ch == 'o' || ch == 'O')
        cout << ch << " is Vowel" << endl;
    else if(ch == 'u' || ch == 'U')
        cout << ch << " is Vowel" << endl;
    else
        cout << ch << " is Consonant" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Letter: e
e is Vowel
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using Library Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using Library Function}]
#include <iostream>
#include <cctype>
using namespace std;
int main()
{
    char ch, temp;
    cout << "Enter a Letter: ";
    cin >> ch;
    temp = ch;
    ch = tolower(ch);
    if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')
        cout << temp << " is Vowel" << endl;
    else
        cout << temp << " is Consonant" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Letter: E
E is Vowel
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using Nested If}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using Nested If}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
    {
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' 
        || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')
            cout << "'" << ch << "' is Vowel." << endl;
        else
            cout << "'" << ch << "' is Consonant." << endl;
    }
    else
    {
        cout << "'" << ch << "' is Not an Alphabet." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: k
'k' is Consonant.
\end{verbatim}
\clearpage

\subsection{Largest of Three Numbers Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Three Numbers Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter Three Numbers: ";
    cin >> num1 >> num2 >> num3;
    if((num1 >= num2) && (num1 >= num3))
        cout << "Largest Number is: " << num1 << endl;
    else if((num2 >= num3) && (num2 >= num1))
        cout << "Largest Number is: " << num2 << endl;
    else
        cout << "Largest Number is: " << num3 << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Numbers: 10 30 20
Largest Number is: 30
\end{verbatim}
\clearpage

\subsection{Smallest of Three Numbers Using If-else if-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Three Numbers Using If-else if-else}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter Three Numbers: ";
    cin >> num1 >> num2 >> num3;
    if((num1 <= num2) && (num1 <= num3))
        cout << "Smallest Number is: " << num1 << endl;
    else if((num2 <= num3) && (num2 <= num1))
        cout << "Smallest Number is: " << num2 << endl;
    else
        cout << "Smallest Number is: " << num3 << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Numbers: 10 30 20
Smallest Number is: 10
\end{verbatim}
\clearpage

\subsection{Largest of Three Numbers Using Nested If}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Three Numbers Using Nested If}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter three numbers: ";
    cin >> num1 >> num2 >> num3;
    if(num1 >= num2)
    {
        if(num1 >= num3)
            cout << num1 << " is the Largest Number" << endl;
        else
            cout << num3 << " is the Largest Number" << endl;
    }
    else
    {
        if(num2 >= num3)
            cout << num2 << " is the Largest Number" << endl;
        else
            cout << num1 << " is the Largest Number" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter three numbers: 10 30 20
30 is the Largest Number
\end{verbatim}
\clearpage

\subsection{Smallest of Three Numbers Using Nested If}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Three Numbers Using Nested If}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter three numbers: ";
    cin >> num1 >> num2 >> num3;
    if(num1 <= num2)
    {
        if(num1 <= num3)
            cout << num1 << " is the Smallest Number" << endl;
        else
            cout << num3 << " is the Smallest Number" << endl;
    }
    else
    {
        if(num2 <= num3)
            cout << num2 << " is the Smallest Number" << endl;
        else
            cout << num1 << " is the Smallest Number" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter three numbers: 10 30 20
10 is the Smallest Number
\end{verbatim}
\clearpage

\subsection{Largest of Three Numbers Using Logical Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Three Numbers Using Logical Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter 1st number: ";
    cin >> num1;
    cout << "Enter 2nd number: ";
    cin >> num2;
    cout << "Enter 3rd number: ";
    cin >> num3;
    if(num1 > num2 && num1 > num3)
        cout << "1st Number is Greatest: " << num1 << endl;
    else if(num2 > num1 && num2 > num3)
        cout << "2nd Number is Greatest: " << num2 << endl;
    else if(num3 > num1 && num3 > num2)
        cout << "3rd Number is Greatest: " << num3 << endl;
    else if(num1 == num2 && num1 > num3)
        cout << "1st & 2nd Number is Greatest: " << num1 << endl;
    else if(num1 == num2 && num3 > num1)
        cout << "3rd Number is Greatest: " << num3 << endl;
    else if(num2 == num3 && num2 > num1)
        cout << "2nd & 3rd Number is Greatest: " << num2 << endl;
    else if(num2 == num3 && num1 > num2)
        cout << "1st Number is Greatest: " << num1 << endl;
    else if(num3 == num1 && num3 > num2)
        cout << "1st & 3rd Number is Greatest: " << num3 << endl;
    else if(num3 == num1 && num2 > num3)
        cout << "2nd Number is Greatest: " << num2 << endl;
    else
        cout << "Numbers are Equal" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st number: 10
Enter 2nd number: 30
Enter 3rd number: 20
2nd Number is Greatest: 30
\end{verbatim}
\clearpage

\subsection{Smallest of Three Numbers Using Logical Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Three Numbers Using Logical Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3;
    cout << "Enter 1st number: ";
    cin >> num1;
    cout << "Enter 2nd number: ";
    cin >> num2;
    cout << "Enter 3rd number: ";
    cin >> num3;
    if(num1 < num2 && num1 < num3)
        cout << "1st Number is Smallest: " << num1 << endl;
    else if(num2 < num1 && num2 < num3)
        cout << "2nd Number is Smallest: " << num2 << endl;
    else if(num3 < num1 && num3 < num2)
        cout << "3rd Number is Smallest: " << num3 << endl;
    else if(num1 == num2 && num1 < num3)
        cout << "1st & 2nd Number is Smallest: " << num1 << endl;
    else if(num1 == num2 && num3 < num1)
        cout << "3rd Number is Smallest: " << num3 << endl;
    else if(num2 == num3 && num2 < num1)
        cout << "2nd & 3rd Number is Smallest: " << num2 << endl;
    else if(num2 == num3 && num1 < num2)
        cout << "1st Number is Smallest: " << num1 << endl;
    else if(num3 == num1 && num3 < num2)
        cout << "1st & 3rd Number is Smallest: " << num3 << endl;
    else if(num3 == num1 && num2 < num3)
        cout << "2nd Number is Smallest: " << num2 << endl;
    else
        cout << "Numbers are Equal" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st number: 10
Enter 2nd number: 30
Enter 3rd number: 20
1st Number is Smallest: 10
\end{verbatim}
\clearpage

\subsection{Find the Coordinate Quadrant Identification}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find the Coordinate Quadrant Identification}]
#include <iostream>
using namespace std;
int main()
{
    int co1, co2;
    cout << "Input the Values for X & Y Coordinate: ";
    cin >> co1 >> co2;
    if(co1 > 0 && co2 > 0)
        cout << "The Coordinate Point (" << co1 << "," << co2 << ") Lies in the First Quadrant" << endl;
    else if(co1 < 0 && co2 > 0)
        cout << "The Coordinate Point (" << co1 << "," << co2 << ") Lies in the Second Quadrant" << endl;
    else if(co1 < 0 && co2 < 0)
        cout << "The Coordinate Point (" << co1 << "," << co2 << ") Lies in the Third Quadrant" << endl;
    else if(co1 > 0 && co2 < 0)
        cout << "The Coordinate Point (" << co1 << "," << co2 << ") Lies in the Fourth Quadrant" << endl;
    else
        cout << "The Coordinate Point (" << co1 << "," << co2 << ") Lies in the Origin" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Input the Values for X & Y Coordinate: 5 3
The Coordinate Point (5,3) Lies in the First Quadrant
\end{verbatim}
\clearpage

\subsection{Creating a Calculator Using If-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Creating a Calculator Using If-else}]
#include <iostream>
using namespace std;
int main()
{
    char oper;
    float num1, num2;
    cout << "Enter an Operator: +, -, *, /: ";
    cin >> oper;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    if(oper == '+')
        cout << "Addition is: " << num1 << " + " << num2 << " = " << num1 + num2 << endl;
    else if(oper == '-')
        cout << "Subtraction is: " << num1 << " - " << num2 << " = " << num1 - num2 << endl;
    else if(oper == '*')
        cout << "Multiplication is: " << num1 << " * " << num2 << " = " << num1 * num2 << endl;
    else if(oper == '/' && num2 != 0)
        cout << "Division is: " << num1 << " / " << num2 << " = " << num1 / num2 << endl;
    else
        cout << "Invalid Input!!!" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Operator: +, -, *, /: +
Enter 1st Number: 10
Enter 2nd Number: 5
Addition is: 10 + 5 = 15
\end{verbatim}
\clearpage

\subsection{Check Leap Year}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Leap Year}]
#include <iostream>
using namespace std;
int main()
{
    int year;
    cout << "Enter a Year: ";
    cin >> year;
    if(year % 400 == 0)
        cout << year << " is a Leap Year" << endl;
    else if((year % 4 == 0) && (year % 100 != 0))
        cout << year << " is a Leap Year" << endl;
    else
        cout << year << " is not a Leap Year" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Year: 2024
2024 is a Leap Year
\end{verbatim}
\clearpage

\subsection{Check Leap Year Using Logical Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Leap Year Using Logical Operator}]
#include <iostream>
using namespace std;
int main()
{
    int year;
    cout << "Enter a Year: ";
    cin >> year;
    if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
        cout << year << " is a Leap Year" << endl;
    else
        cout << year << " is not a Leap Year" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Year: 2023
2023 is not a Leap Year
\end{verbatim}
\clearpage

\subsection{Check Uppercase or Lowercase}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Uppercase or Lowercase}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter a Character: ";
    cin >> ch;
    if((ch >= 'A') && (ch <= 'Z'))
        cout << ch << " is a Uppercase Letter" << endl;
    else if((ch >= 'a') && (ch <= 'z'))
        cout << ch << " is a Lowercase Letter" << endl;
    else
        cout << ch << " is not a Letter" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Character: A
A is a Uppercase Letter
\end{verbatim}
\clearpage

\subsection{Check Uppercase or Lowercase Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Uppercase or Lowercase Using Function}]
#include <iostream>
#include <cctype>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    if(isupper(ch))
        cout << "'" << ch << "' is Uppercase Alphabet." << endl;
    else if(islower(ch))
        cout << "'" << ch << "' is Lowercase Alphabet." << endl;
    else
        cout << "'" << ch << "' is Not an Alphabet." << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: a
'a' is Lowercase Alphabet.
\end{verbatim}
\clearpage

\subsection{Check Triangle is Valid or Not if Angles Are Given}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Triangle is Valid or Not if Angles Are Given}]
#include <iostream>
using namespace std;
int main()
{
    int angle1, angle2, angle3, sum;
    cout << "Enter Three Angles of Triangle: ";
    cin >> angle1 >> angle2 >> angle3;
    sum = angle1 + angle2 + angle3;
    if((sum == 180) && (angle1 > 0) && (angle2 > 0) && (angle3 > 0))
    {
        cout << "Triangle is Valid." << endl;
    }
    else
    {
        cout << "Triangle is Not Valid." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Angles of Triangle: 60 60 60
Triangle is Valid.
\end{verbatim}
\clearpage

\subsection{Check Triangle is Valid or Not if Sides Are Given}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Triangle is Valid or Not if Sides Are Given}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3;
    cout << "Enter Three Sides of Triangle: ";
    cin >> side1 >> side2 >> side3;
    if((side1 + side2) > side3)
    {
        if((side2 + side3) > side1)
        {
            if((side1 + side3) > side2)
            {
                cout << "Triangle is Valid." << endl;
            }
            else
            {
                cout << "Triangle is Not Valid." << endl;
            }
        }
        else
        {
            cout << "Triangle is Not Valid." << endl;
        }
    }
    else
    {
        cout << "Triangle is Not Valid." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Sides of Triangle: 3 4 5
Triangle is Valid.
\end{verbatim}
\clearpage

\subsection{Check Triangle is Valid or Not if Sides Are Given Using Logical Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Triangle is Valid or Not if Sides Are Given Using Logical Operator}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3;
    cout << "Enter Three Sides of Triangle: ";
    cin >> side1 >> side2 >> side3;
    if(((side1 + side2) > side3) && ((side2 + side3) > side1) && ((side3 + side1) > side2)
        && (side1 > 0) && (side2 > 0) && (side3 > 0))
    {
        cout << "Triangle is valid." << endl;
    }
    else
    {
        cout << "Triangle is not valid." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Sides of Triangle: 3 4 5
Triangle is valid.
\end{verbatim}
\clearpage

\subsection{Check a Triangle is Equilateral, Scalene or Isosceles}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Triangle is Equilateral, Scalene or Isosceles}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3;
    cout << "Enter Three Sides of Triangle: ";
    cin >> side1 >> side2 >> side3;
    if(((side1 + side2) > side3) && ((side2 + side3) > side1) && ((side3 + side1) > side2)
        && (side1 > 0) && (side2 > 0) && (side3 > 0))
    {
        if((side1 == side2) && (side2 == side3)) 
        {
            cout << "Triangle is Equilateral" << endl;
        }
        else if((side1 == side2) || (side1 == side3) || (side2 == side3)) 
        {
            cout << "Triangle is Isosceles" << endl;
        }
        else 
        {
            cout << "Triangle is Scalene" << endl;
        }
    }
    else
    {
        cout << "Triangle is Not Valid" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Sides of Triangle: 5 5 5
Triangle is Equilateral
\end{verbatim}
\clearpage

\subsection{Check a Triangle is Acute, Obtuse or Right-angled}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Triangle is Acute, Obtuse or Right-angled}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3;
    cout << "Enter Three Sides: ";
    cin >> side1 >> side2 >> side3;
    if(((side1 + side2) > side3) && ((side2 + side3) > side1) && ((side3 + side1) > side2))
    {
        int a = (side1 * side1), b = (side2 * side2), c = (side3 * side3);
        if(((a + b) == c) || ((b + c) == a) || ((a + c) == b))
            cout << "Right-angled" << endl;
        else if(((a + b) > c) && ((b + c) > a) && ((a + c) > b))
            cout << "Acute" << endl;
        else
            cout << "Obtuse" << endl;
    }
    else
        cout << "Not a triangle" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Sides: 3 4 5
Right-angled
\end{verbatim}
\clearpage

\subsection{Find The Type of Quadrilateral Based on Sides \& Angles}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find The Type of Quadrilateral Based on Sides \& Angles}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3, side4, angle;
    cout << "Enter Four Sides: ";
    cin >> side1 >> side2 >> side3 >> side4;
    cout << "Enter Angle: ";
    cin >> angle;
    if((side1 == side2) && (side2 == side3) && (side3 == side4))
    {
        if(angle == 90)
            cout << "Square" << endl;
        else
            cout << "Rhombus" << endl;
    }
    else if((side1 == side3) && (side2 == side4))
    {
        if(angle == 90)
            cout << "Rectangle" << endl;
        else
            cout << "Parallelogram" << endl;
    }
    else
        cout << "Quadrilateral" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Four Sides: 5 5 5 5
Enter Angle: 90
Square
\end{verbatim}
\clearpage

\subsection{Check a Date is Valid}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Date is Valid}]
#include <iostream>
using namespace std;
int main()
{
    int day, month, year;
    cout << "Enter Date: ";
    cin >> day;
    cout << "Enter Month: ";
    cin >> month;
    cout << "Enter Year: ";
    cin >> year;
    if((month >= 1) && (month <= 12) && (year > 0))
    {
        if(month == 2)
        {
            if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
            {
                if((day >= 1) && (day <= 29))
                    cout << "Valid Date" << endl;
                else
                    cout << "Invalid Date" << endl;
            }
            else
            {
                if((day >= 1) && (day <= 28))
                    cout << "Valid Date" << endl;
                else
                    cout << "Invalid Date" << endl;
            }
        }
        else if((month == 4) || (month == 6) || (month == 9) || (month == 11))
        {
            if((day >= 1) && (day <= 30))
                cout << "Valid Date" << endl;
            else
                cout << "Invalid Date" << endl;
        }
        else
        {
            if((day >= 1) && (day <= 31))
                cout << "Valid Date" << endl;
            else
                cout << "Invalid Date" << endl;
            }
        }
    else
        cout << "Invalid Date" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Date: 29
Enter Month: 2
Enter Year: 2024
Valid Date
\end{verbatim}
\clearpage

\subsection{Check Alphabet, Digit or Special Character}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Alphabet, Digit or Special Character}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
    {
        cout << "'" << ch << "' is Alphabet." << endl;
    }
    else if(ch >= '0' && ch <= '9')
    {
        cout << "'" << ch << "' is Digit." << endl;
    }
    else
    {
        cout << "'" << ch << "' is Special Character." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: @
'@' is Special Character.
\end{verbatim}
\clearpage

\subsection{Check Alphabet, Digit or Special Character Using ASCII}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Alphabet, Digit or Special Character Using ASCII}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    if((ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90))
    {
        cout << "'" << ch << "' is Alphabet." << endl;
    }
    else if(ch >= 48 && ch <= 57)
    {
        cout << "'" << ch << "' is Digit." << endl;
    }
    else
    {
        cout << "'" << ch << "' is Special Character." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: 5
'5' is Digit.
\end{verbatim}
\clearpage

\subsection{Print Day Name of Week}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Day Name of Week}]
#include <iostream>
using namespace std;
int main()
{
    int week;
    cout << "Enter Week Number (1-7): ";
    cin >> week;
    if(week == 1)
        cout << "Monday" << endl;
    else if(week == 2)
        cout << "Tuesday" << endl;
    else if(week == 3)
        cout << "Wednesday" << endl;
    else if(week == 4)
        cout << "Thursday" << endl;
    else if(week == 5)
        cout << "Friday" << endl;
    else if(week == 6)
        cout << "Saturday" << endl;
    else if(week == 7)
        cout << "Sunday" << endl;
    else
        cout << "Invalid Input!!!" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Week Number (1-7): 3
Wednesday
\end{verbatim}
\clearpage

\subsection{Print Days in a Month}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Days in a Month}]
#include <iostream>
using namespace std;
int main()
{
    int month;
    cout << "Enter Month Number (1-12): ";
    cin >> month;
    if(month == 1 || month == 3 || month == 5 || month == 7 
       || month == 8 || month == 10 || month == 12)
    {
        cout << "Number of Days: 31" << endl;
    }
    else if(month == 4 || month == 6 || month == 9 || month == 11)
    {
        cout << "Number of Days: 30" << endl;
    }
    else if(month == 2)
    {
        cout << "Number of Days: 28 or 29" << endl;
    }
    else
    {
        cout << "Invalid Input!!!" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Month Number (1-12): 4
Number of Days: 30
\end{verbatim}
\clearpage

\subsection{Find Roots of Quadratic Equation Using If-else}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Roots of Quadratic Equation Using If-else}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    float a, b, c, Dis, X1, X2, Ima;
    cout << "Enter Values of a, b, c: ";
    cin >> a >> b >> c;
    Dis = (b * b) - (4 * a * c);
    if(a == 0)
    {
        cout << "Not a Quadratic Equation" << endl;
    }
    else if(Dis > 0)
    {
        X1 = (-b + sqrt(Dis)) / (2 * a);
        X2 = (-b - sqrt(Dis)) / (2 * a);
        cout << "Two Distinct & Real Roots Exists:" << endl;
        cout << "Root 1 is: " << X1 << endl;
        cout << "Root 2 is: " << X2 << endl;
    }
    else if(Dis == 0)
    {
        X1 = X2 = -b / (2 * a);
        cout << "Two Equal & Real Roots Exists:" << endl;
        cout << "Root 1 is: " << X1 << endl;
        cout << "Root 2 is: " << X2 << endl;
    }
    else if(Dis < 0)
    {
        X1 = X2 = -b / (2 * a);
        Ima = sqrt(-Dis) / (2 * a);
        cout << "Two Distinct Complex Roots Exists:" << endl;
        cout << "Root 1 is: " << X1 << " + " << Ima << "i" << endl;
        cout << "Root 2 is: " << X2 << " - " << Ima << "i" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Values of a, b, c: 1 -2 1
Two Equal & Real Roots Exists:
Root 1 is: 1
Root 2 is: 1
\end{verbatim}
\clearpage

\subsection{Calculate Profit or Loss}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Profit or Loss}]
#include <iostream>
using namespace std;
int main()
{
    int CP, SP, Amount;
    cout << "Enter Cost Price: ";
    cin >> CP;
    cout << "Enter Selling Price: ";
    cin >> SP;
    if(SP > CP)
    {
        Amount = SP - CP;
        cout << "Profit = " << Amount << endl;
    }
    else if(CP > SP)
    {
        Amount = CP - SP;
        cout << "Loss = " << Amount << endl;
    }
    else
    {
        cout << "No Profit & Loss." << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Cost Price: 100
Enter Selling Price: 120
Profit = 20
\end{verbatim}
\clearpage

\subsection{Count Total Number of Notes in Amount (Method 1)}
\begin{lstlisting}[caption={Count Total Number of Notes in Amount (Method 1)}]
#include <iostream>
using namespace std;
int main()
{
    int amount;
    int note500, note100, note50, note20, note10, note5, note2, note1;
    note500 = note100 = note50 = note20 = note10 = note5 = note2 = note1 = 0;
    cout << "Enter Amount: ";
    cin >> amount;
    cout << "Total Number of Notes:" << endl;
    cout << "``````````````````````" << endl;
    if(amount >= 500){
        note500 = amount / 500;
        amount -= (note500 * 500);
        cout << "Note of 500: " << note500 << endl;
    }
    if(amount >= 100){
        note100 = amount / 100;
        amount -= (note100 * 100);
        cout << "Note of 100: " << note100 << endl;
    }
    if(amount >= 50){
        note50 = amount / 50;
        amount -= (note50 * 50);
        cout << "Note of 50: " << note50 << endl;
    }
    if(amount >= 20){
        note20 = amount / 20;
        amount -= (note20 * 20);
        cout << "Note of 20: " << note20 << endl;
    }
    if(amount >= 10){
        note10 = amount / 10;
        amount -= (note10 * 10);
        cout << "Note of 10: " << note10 << endl;
    }
    if(amount >= 5){
        note5 = amount / 5;
        amount -= (note5 * 5);
        cout << "Note of 5: " << note5 << endl;
    }
    if(amount >= 2){
        note2 = amount / 2;
        amount -= (note2 * 2);
        cout << "Note of 2: " << note2 << endl;
    }
    if(amount >= 1){
        note1 = amount;
        cout << "Note of 1: " << note1 << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Amount: 1234
Total Number of Notes:
``````````````````````
Note of 500: 2     Note of 100: 2     Note of 20: 1      Note of 10: 1      Note of 2: 2
\end{verbatim}
\clearpage

\subsection{Count Total Number of Notes in Amount (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Total Number of Notes in Amount (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    int amount, i;
    cout << "Enter the amount: ";
    cin >> amount;
    int notes[] = {500, 100, 50, 20, 10, 5, 2, 1};
    int count;
    cout << "Number of notes:" << endl;
    for(i = 0; i < 8; i++)
    {
        count = amount / notes[i];
        if(count > 0)
            cout << count << " notes of " << notes[i] << endl;
        amount = amount % notes[i];
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the amount: 1289
Number of notes:
2 notes of 500
2 notes of 100
1 notes of 50
1 notes of 20
1 notes of 10
2 notes of 2
\end{verbatim}
\clearpage

\subsection{Grading System Using Logical Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Grading System Using Logical Operator}]
#include <iostream>
using namespace std;
int main()
{
    int mark;
    cout << "Enter Mark: ";
    cin >> mark;
    if(mark > 100 || mark < 0)
        cout << "Invalid Mark!!!" << endl;
    else if(mark >= 80 && mark <= 100)
        cout << "Your Grade is A+ & Number: " << mark << endl;
    else if(mark >= 70 && mark <= 79)
        cout << "Your Grade is A & Number: " << mark << endl;
    else if(mark >= 60 && mark <= 69)
        cout << "Your Grade is A- & Number: " << mark << endl;
    else if(mark >= 50 && mark <= 59)
        cout << "Your Grade is B & Number: " << mark << endl;
    else if(mark >= 40 && mark <= 49)
        cout << "Your Grade is C & Number: " << mark << endl;
    else if(mark >= 33 && mark <= 39)
        cout << "Your Grade is D & Number: " << mark << endl;
    else
        cout << "Your Grade is F & Number: " << mark << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Mark: 85
Your Grade is A+ & Number: 85
\end{verbatim}
\clearpage

\subsection{Calculate Percentage \& Grade From Marks}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Percentage \& Grade From Marks}]
#include <iostream>
using namespace std;
int main()
{
    float physics, chemistry, biology, mathematics, computer, total, percentage;
    cout << "Enter Marks of Physics: ";
    cin >> physics;
    cout << "Enter Marks of Chemistry: ";
    cin >> chemistry;
    cout << "Enter Marks of Biology: ";
    cin >> biology;
    cout << "Enter Marks of Mathematics: ";
    cin >> mathematics;
    cout << "Enter Marks of Computer: ";
    cin >> computer;
    total = physics + chemistry + biology + mathematics + computer;
    percentage = (total / 500) * 100;
    if((physics > 100 || physics < 0) || (chemistry > 100 || chemistry < 0) 
        || (biology > 100 || biology < 0) || (mathematics > 100 || mathematics < 0) 
            || (computer > 100 || computer < 0))
    {
        cout << "Invalid Mark!!!" << endl;
        return 1;
    }
    else if(percentage >= 80 && percentage <= 100)
        cout << "Your Grade is A+ & Number: " << percentage << endl;
    else if(percentage >= 70 && percentage <= 79)
        cout << "Your Grade is A & Number: " << percentage << endl;
    else if(percentage >= 60 && percentage <= 69)
        cout << "Your Grade is A- & Number: " << percentage << endl;
    else if(percentage >= 50 && percentage <= 59)
        cout << "Your Grade is B & Number: " << percentage << endl;
    else if(percentage >= 40 && percentage <= 49)
        cout << "Your Grade is C & Number: " << percentage << endl;
    else if(percentage >= 33 && percentage <= 39)
        cout << "Your Grade is D & Number: " << percentage << endl;
    else
        cout << "Your Grade is F & Number: " << percentage << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Marks of Physics: 85
Enter Marks of Chemistry: 90
Enter Marks of Biology: 88
Enter Marks of Mathematics: 92
Enter Marks of Computer: 87
Your Grade is A+ & Number: 88.400002
\end{verbatim}
\clearpage

\subsection{Calculate Gross Salary from Basic Salary}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Gross Salary from Basic Salary}]
#include <iostream>
using namespace std;
int main()
{
    float basic, hra, da, gross;
    cout << "Enter Basic Salary: ";
    cin >> basic;
    if(basic <= 10000)
    {
        hra = (0.20 * basic);
        da = (0.80 * basic);
    }
    else if(basic <= 20000)
    {
        hra = (0.25 * basic);
        da = (0.90 * basic);
    }
    else
    {
        hra = (0.30 * basic);
        da = (0.95 * basic);
    }
    gross = basic + hra + da;
    cout << "Gross Salary is: " << gross << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Basic Salary: 8000
Gross Salary is: 16000
\end{verbatim}
\clearpage

\subsection{Calculate Total Electricity Bill}
\vspace{0.5cm}
\begin{lstlisting}[caption={Calculate Total Electricity Bill}]
#include <iostream>
using namespace std;
int main()
{
    float units, bill = 0, surcharge, total;
    cout << "Enter electricity units consumed: ";
    cin >> units;
    if(units <= 50)
    {
        bill = (units * 0.50);
    }
    else if(units <= 150)
    {
        bill = (50 * 0.50 + (units - 50) * 0.75);
    }
    else if(units <= 250)
    {
        bill = (50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20);
    }
    else
    {
        bill = (50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50);
    }
    surcharge = (0.20 * bill);
    total = (bill + surcharge);
    cout << "Total Electricity Bill: Rs. " << total << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter electricity units consumed: 300
Total Electricity Bill: Rs. 258
\end{verbatim}
\clearpage


\section{Switch Programming Exercises}


\subsection{Print Digit From 0-9 Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Digit From 0-9 Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int digit;
    cout << "Enter a Digit: ";
    cin >> digit;
    switch(digit)
    {
    case 0:
        cout << "Number Is Zero" << endl;
        break;
    case 1:
        cout << "Number Is One" << endl;
        break;
    case 2:
        cout << "Number Is Two" << endl;
        break;
    case 3:
        cout << "Number Is Three" << endl;
        break;
    case 4:
        cout << "Number Is Four" << endl;
        break;
    case 5:
        cout << "Number Is Five" << endl;
        break;
    case 6:
        cout << "Number Is Six" << endl;
        break;
    case 7:
        cout << "Number Is Seven" << endl;
        break;
    case 8:
        cout << "Number Is Eight" << endl;
        break;
    case 9:
        cout << "Number Is Nine" << endl;
        break;
    default:
        cout << "Number Is Not Valid" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Digit: 5
Number Is Five
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using Switch (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using Switch (Method 1)}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter a Character: ";
    cin >> ch;
    switch(ch)
    {
    case 'a':
        cout << "This is a Vowel" << endl;
        break;
    case 'e':
        cout << "This is a Vowel" << endl;
        break;
    case 'i':
        cout << "This is a Vowel" << endl;
        break;
    case 'o':
        cout << "This is a Vowel" << endl;
        break;
    case 'u':
        cout << "This is a Vowel" << endl;
        break;
    case 'A':
        cout << "This is a Vowel" << endl;
        break;
    case 'E':
        cout << "This is a Vowel" << endl;
        break;
    case 'I':
        cout << "This is a Vowel" << endl;
        break;
    case 'O':
        cout << "This is a Vowel" << endl;
        break;
    case 'U':
        cout << "This is a Vowel" << endl;
        break;
    default:
        cout << "This is a Consonant" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Character: e
This is a Vowel
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using Switch (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using Switch (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter a Character: ";
    cin >> ch;
    switch(ch)
    {
    case 'a':
    case 'e':
    case 'i':
    case 'o':
    case 'u':
    case 'A':
    case 'E':
    case 'I':
    case 'O':
    case 'U':
        cout << "This is a Vowel" << endl;
        break;
    default:
        cout << "This is a Consonant" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Character: A
This is a Vowel
\end{verbatim}
\clearpage

\subsection{Menu Based Temperature Conversion Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Menu Based Temperature Conversion Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int choice;
    float Temp, ConvertedTemp;
    cout << "Temperature Conversion Menu" << endl;
    cout << "1. Fahrenheit to Celsius" << endl;
    cout << "2. Celsius to Fahrenheit" << endl;
    cout << "Enter Your Choice: ";
    cin >> choice;
    switch(choice)
    {
    case 1:
        {
            cout << "Enter the Fahrenheit Temperature: ";
            cin >> Temp;
            ConvertedTemp = ((Temp - 32) * 5) / 9;
            cout << "The Temperature in Celsius: " << ConvertedTemp << endl;
            break;
        }
    case 2:
        {
            cout << "Enter the Celsius Temperature: ";
            cin >> Temp;
            ConvertedTemp = (9 * Temp / 5) + 32;
            cout << "The Temperature in Fahrenheit: " << ConvertedTemp << endl;
            break;
        }
    default:
        cout << "Invalid Choice" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Temperature Conversion Menu
1. Fahrenheit to Celsius
2. Celsius to Fahrenheit
Enter Your Choice: 1
Enter the Fahrenheit Temperature: 32
The Temperature in Celsius: 0
\end{verbatim}
\clearpage

\subsection{Creating a Calculator Using Switch (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Creating a Calculator Using Switch (Method 1)}]
#include <iostream>
using namespace std;
int main()
{
    double num1, num2;
    char oper;
    cout << "Enter an Operator: +, -, *, /: ";
    cin >> oper;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    switch(oper)
    {
    case '+':
        {
            cout << "Addition is: " << num1 << " + " << num2 << " = " << num1 + num2 << endl;
            break;
        }
    case '-':
        {
            cout << "Subtraction is: " << num1 << " - " << num2 << " = " << num1 - num2 << endl;
            break;
        }
    case '*':
        {
            cout << "Multiplication is: " << num1 << " * " << num2 << " = " << num1 * num2 << endl;
            break;
        }
    case '/':
        {
            cout << "Division is: " << num1 << " / " << num2 << " = " << num1 / num2 << endl;
            break;
        }
    default:
        cout << "Not a Valid Character" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter an Operator: +, -, *, /: +
Enter 1st Number: 10
Enter 2nd Number: 5
Addition is: 10 + 5 = 15
\end{verbatim}
\clearpage

\subsection{Creating a Calculator Using Switch (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Creating a Calculator Using Switch (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    double num1, num2, result;
    char oper;
    cout << "Enter an Operator: +, -, *, /: ";
    cin >> oper;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    switch(oper)
    {
    case '+':
        {
            result = num1 + num2;
            cout << "Addition is: " << num1 << " + " << num2 << " = " << result << endl;
            break;
        }
    case '-':
        {
            result = num1 - num2;
            cout << "Subtraction is: " << num1 << " - " << num2 << " = " << result << endl;
            break;
        }
    case '*':
        {
            result = num1 * num2;
            cout << "Multiplication is: " << num1 << " * " << num2 << " = " << result << endl;
            break;
        }
    case '/':
        {
            if(num2 != 0)
            {
                result = num1 / num2;
                cout << "Division is: " << num1 << " / " << num2 << " = " << result << endl;
            }
            else
            {
                cout << "Error!!!" << endl;
            }
            break;
        }
    default:
        cout << "Invalid operator!!!" << endl;
    }
    return 0;
}
\end{lstlisting}
\clearpage

\subsection{Check Even or Odd Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Even or Odd Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter Any Number: ";
    cin >> num;
    switch(num % 2)
    {
    case 0:
        cout << num << " is Even" << endl;
        break;
    case 1:
        cout << num << " is Odd" << endl;
        break;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: 6
6 is Even
\end{verbatim}
\clearpage

\subsection{Find Roots of Quadratic Equation Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Roots of Quadratic Equation Using Switch}]
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    float a, b, c, Dis, X1, X2, Ima;
    cout << "Enter Values of a, b, c: ";
    cin >> a >> b >> c;
    Dis = (b * b) - (4 * a * c);
    switch(Dis > 0)
    {
    case 1:
        {
            X1 = (-b + sqrt(Dis)) / (2 * a);
            X2 = (-b - sqrt(Dis)) / (2 * a);
            cout << "Two Distinct & Real Roots Exists:" << endl;
            cout << "Root 1 is: " << X1 << endl;
            cout << "Root 2 is: " << X2 << endl;
            break;
        }
    case 0:
        {
            switch(Dis < 0)
            {
            case 1:
                {
                    X1 = X2 = -b / (2 * a);
                    Ima = sqrt(-Dis) / (2 * a);
                    cout << "Two Distinct Complex Roots Exists:" << endl;
                    cout << "Root 1 is: " << X1 << " + " << Ima << "i" << endl;
                    cout << "Root 2 is: " << X2 << " - " << Ima << "i" << endl;
                    break;
                }
            case 0:
                {
                    X1 = X2 = -b / (2 * a);
                    cout << "Two Equal & Real Roots Exists:" << endl;
                    cout << "Root 1 is: " << X1 << endl;
                    cout << "Root 2 is: " << X2 << endl;
                    break;
                }
            }
        }
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Values of a, b, c: 1 -3 2
Two Distinct & Real Roots Exists:
Root 1 is: 2
Root 2 is: 1
\end{verbatim}
\clearpage

\subsection{Check Positive, Negative or Zero Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Positive, Negative or Zero Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter Any Number: ";
    cin >> num;
    switch(num > 0)
    {
        case 1:
            cout << num << " is Positive." << endl;
            break;
        case 0:
            switch(num < 0)
            {
                case 1:
                    cout << num << " is Negative." << endl;
                    break;
                case 0:
                    cout << num << " is Zero." << endl;
                    break;
            }
            break;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: -4
-4 is Negative.
\end{verbatim}
\clearpage

\subsection{Print Number of Days in a Month Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number of Days in a Month Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int month;
    cout << "Enter Month: ";
    cin >> month;
    switch(month)
    {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            cout << "31 days" << endl;
            break;
        case 4:
        case 6:
        case 9:
        case 11:
            cout << "30 days" << endl;
            break;
        case 2:
            cout << "28/29 days" << endl;
            break;
        default:
            cout << "Invalid Input!!!" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Month: 4
30 days
\end{verbatim}
\clearpage

\subsection{Grading System Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Grading System Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int marks;
    cout << "Enter Your Marks: ";
    cin >> marks;
    if(marks > 100 || marks < 0)
        cout << "Invalid Marks!!!" << endl;
    else
    {
        switch(marks / 10)
        {
        case 10:
        case 9:
            cout << "Your Grade is: A" << endl;
            break;
        case 8:
            cout << "Your Grade is: B" << endl;
            break;
        case 7:
            cout << "Your Grade is: C" << endl;
            break;
        case 6:
            cout << "Your Grade is: D" << endl;
            break;
        case 5:
            cout << "Your Grade is: E" << endl;
            break;
        case 4:
            cout << "Your Grade is: E-" << endl;
            break;
        default:
            cout << "Your Grade is: F" << endl;
        }
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Your Marks: 85
Your Grade is: A
\end{verbatim}
\clearpage

\subsection{Largest of Two Numbers Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Two Numbers Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    switch(num1 > num2)
    {
        case 0:
            cout << num2 << " is Largest" << endl;
            break;
        case 1:
            cout << num1 << " is Largest" << endl;
            break;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 15 25
25 is Largest
\end{verbatim}
\clearpage

\subsection{Smallest of Two Numbers Using Switch}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Two Numbers Using Switch}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    switch(num1 < num2)
    {
        case 0:
            cout << num2 << " is Smallest" << endl;
            break;
        case 1:
            cout << num1 << " is Smallest" << endl;
            break;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 15 25
15 is Smallest
\end{verbatim}
\clearpage

\subsection{User Input in a Loop with Switch Case for a Voting System}
\vspace{0.5cm}
\begin{lstlisting}[caption={User Input in a Loop with Switch Case for a Voting System}]
#include <iostream>
using namespace std;
int main()
{
    int vote, countA = 0, countB = 0;
    cout << "Enter vote - 1 for A, 2 for B & 0 to exit: ";
    cin >> vote;
    while(vote != 0)
    {
        switch(vote)
        {
            case 1:
                countA++;
                break;
            case 2:
                countB++;
                break;
            default:
                cout << "Invalid vote" << endl;
        }
        cout << "Enter vote - 1 for A, 2 for B & 0 to exit: ";
        cin >> vote;
    }
    cout << "Candidate A: " << countA << " votes" << endl;
    cout << "Candidate B: " << countB << " votes" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter vote - 1 for A, 2 for B & 0 to exit: 1
Enter vote - 1 for A, 2 for B & 0 to exit: 2
Enter vote - 1 for A, 2 for B & 0 to exit: 1
Enter vote - 1 for A, 2 for B & 0 to exit: 0
Candidate A: 2 votes
Candidate B: 1 votes
\end{verbatim}
\clearpage

\subsection{Currency Converting Using Switch Case}
\vspace{0.5cm}
\begin{lstlisting}[caption={Currency Converting Using Switch Case}]
#include <iostream>
using namespace std;
int main()
{
    int choice;
    float amount, rate;
    cout << "Currency Conversion Menu" << endl;
    cout << "1. USD to EUR     2. USD to GBP     3. EUR to USD" << endl;
    cout << "4. EUR to GBP     5. GBP to USD     6. GBP to EUR" << endl;
    cout << "Enter Your Choice: ";
    cin >> choice;
    switch(choice)
    {
        case 1:
            cout << "Enter the Amount in USD: ";
            cin >> amount;
            rate = 0.85;
            cout << amount << " USD = " << (amount * rate) << " EUR" << endl;
            break;
        case 2:
            cout << "Enter the Amount in USD: ";
            cin >> amount;
            rate = 0.73;
            cout << amount << " USD = " << (amount * rate) << " GBP" << endl;
            break;
        case 3:
            cout << "Enter the Amount in EUR: ";
            cin >> amount;
            rate = 1.18;
            cout << amount << " EUR = " << (amount * rate) << " USD" << endl;
            break;
        case 4:
            cout << "Enter the Amount in EUR: ";
            cin >> amount;
            rate = 0.86;
            cout << amount << " EUR = " << (amount * rate) << " GBP" << endl;
            break;
        case 5:
            cout << "Enter the Amount in GBP: ";
            cin >> amount;
            rate = 1.37;
            cout << amount << " GBP = " << (amount * rate) << " USD" << endl;
            break;
        case 6:
            cout << "Enter the Amount in GBP: ";
            cin >> amount;
            rate = 1.16;
            cout << amount << " GBP = " << (amount * rate) << " EUR" << endl;
            break;
        default:
            cout << "Invalid Choice" << endl;
    }
    return 0;
}
\end{lstlisting}
\clearpage

\subsection{Simulate a Simple ATM Interface Using Switch Case}
\vspace{0.5cm}
\begin{lstlisting}[caption={Simulate a Simple ATM Interface Using Switch Case}]
#include <iostream>
using namespace std;
int main()
{
    int choice, pin = 1234, inputPin;
    float balance = 1000.0, amount;
    cout << "Enter PIN: ";
    cin >> inputPin;
    if(inputPin != pin)
    {
        cout << "Invalid PIN!!!" << endl;
        return 0;
    }
    cout << "1. Check Balance" << endl;
    cout << "2. Withdraw" << endl;
    cout << "3. Deposit" << endl;
    cout << "Enter choice: ";
    cin >> choice;
    switch(choice)
    {
        case 1:
            cout << "Balance: " << balance << endl;
            break;
        case 2:
            cout << "Enter Amount: ";
            cin >> amount;
            if(amount <= balance)
                cout << "New Balance: " << (balance - amount) << endl;
            else
                cout << "Insufficient Funds!!!" << endl;
            break;
        case 3:
            cout << "Enter Amount: ";
            cin >> amount;
            cout << "New Balance: " << (balance + amount) << endl;
            break;
        default:
            cout << "Invalid choice" << endl;
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter PIN: 1234
1. Check Balance
2. Withdraw
3. Deposit
Enter choice: 1
Balance: 1000
\end{verbatim}
\clearpage


\section{Conditional Operator Programming Exercise}


\subsection{Largest of Two Numbers Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Two Numbers Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, max;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    max = (num1 > num2) ? num1 : num2;
    cout << "Largest Between " << num1 << " & " << num2 << " is " << max << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st Number: 10
Enter 2nd Number: 20
Largest Between 10 & 20 is 20
\end{verbatim}
\clearpage

\subsection{Smallest of Two Numbers Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Two Numbers Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, min;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    min = (num1 < num2) ? num1 : num2;
    cout << "Smallest Between " << num1 << " & " << num2 << " is " << min << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter 1st Number: 10
Enter 2nd Number: 20
Smallest Between 10 & 20 is 10
\end{verbatim}
\clearpage

\subsection{Largest of Three Numbers Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Largest of Three Numbers Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3, max;
    cout << "Enter three numbers: ";
    cin >> num1 >> num2 >> num3;
    max = ((num1 > num2) && (num1 > num3)) ? num1 : ((num2 > num3) ? num2 : num3);
    cout << "Largest Between " << num1 << ", " << num2 << " & " << num3 << " is " << max << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter three numbers: 5 15 10
Largest Between 5, 15 & 10 is 15
\end{verbatim}
\clearpage

\subsection{Smallest of Three Numbers Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Smallest of Three Numbers Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2, num3, min;
    cout << "Enter three numbers: ";
    cin >> num1 >> num2 >> num3;
    min = ((num1 < num2) && (num1 < num3)) ? num1 : ((num2 < num3) ? num2 : num3);
    cout << "Smallest Between " << num1 << ", " << num2 << " & " << num3 << " is " << min << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter three numbers: 5 15 10
Smallest Between 5, 15 & 10 is 5
\end{verbatim}
\clearpage

\subsection{Even or Odd Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Even or Odd Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter Any Number: ";
    cin >> num;
    (num % 2 == 0) ? cout << num << " is Even" << endl : cout << num << " is Odd" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: 7
7 is Odd
\end{verbatim}
\clearpage

\subsection{Leap Year Using Conditional Operator (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Leap Year Using Conditional Operator (Method 1)}]
#include <iostream>
using namespace std;
int main()
{
    int year;
    cout << "Enter Any Year: ";
    cin >> year;
    ((year % 4 == 0) && (year % 100 != 0)) ? cout << year << " is a Leap Year" << endl : 
        ((year % 400 == 0) ? cout << year << " is a Leap Year" << endl : 
            cout << year << " is a Not Leap Year" << endl);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Year: 2024
2024 is a Leap Year
\end{verbatim}
\clearpage

\subsection{Leap Year Using Conditional Operator (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Leap Year Using Conditional Operator (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    int year;
    cout << "Enter Any Year: ";
    cin >> year;
    cout << (((year % 4 == 0) && (year % 100 != 0)) ? "Leap Year" : 
                 ((year % 400 == 0) ? "Leap Year" : "Not Leap Year")) << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Year: 2023
Not Leap Year
\end{verbatim}
\clearpage

\subsection{Alphabet Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Alphabet Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) ? 
        cout << ch << " is a Alphabet" << endl : cout << ch << " is Not a Alphabet" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: b
b is a Alphabet
\end{verbatim}
\clearpage

\subsection{Positive, Negative or Zero Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Positive, Negative or Zero Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter Any Number: ";
    cin >> num;
    (num > 0) ? cout << "The Number is Positive" << endl : (num < 0) ? 
        cout << "The Number is Negative" << endl : cout << "The Number is Zero" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: -3
The Number is Negative
\end{verbatim}
\clearpage

\subsection{Vowel Consonant Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Vowel Consonant Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    char ch;
    cout << "Enter Any Character: ";
    cin >> ch;
    (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
     ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') ? 
            cout << "It is a Vowel" << endl : cout << "It is a consonant" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Character: o
It is a Vowel
\end{verbatim}
\clearpage

\subsection{Coordinate Quadrant Identification Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Coordinate Quadrant Identification Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int x, y;
    cout << "Input the Values for X & Y Coordinate: ";
    cin >> x >> y;
    ((x == 0) || (y == 0)) ? cout << "Lies in the Origin" << endl : (x > 0) ? 
            ((y > 0) ? cout << "First quadrant" << endl : cout << "Fourth quadrant" << endl) : 
                    ((y > 0) ? cout << "Second quadrant" << endl : cout << "Third quadrant" << endl);
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Input the Values for X & Y Coordinate: 2 3
First quadrant
\end{verbatim}
\clearpage

\subsection{Triangle is Valid or Not if Sides Are Given Using Conditional Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Triangle is Valid or Not if Sides Are Given Using Conditional Operator}]
#include <iostream>
using namespace std;
int main()
{
    int side1, side2, side3;
    cout << "Enter Three Sides: ";
    cin >> side1 >> side2 >> side3;
    (((side1 + side2) > side3) && ((side2 + side3) > side1) && ((side1 + side3) > side2)) ? 
            cout << "The Triangle is Valid" << endl : cout << "The Triangle is Not Valid" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Three Sides: 3 4 5
The Triangle is Valid
\end{verbatim}
\clearpage


\section{Bitwise Operator Programming Exercises}


\subsection{Convert Decimal to Binary Using Bitwise Operator (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Decimal to Binary Using Bitwise Operator (Method 1)}]
#include <iostream>
using namespace std;
#define INT_SIZE sizeof(int)*8
int main()
{
    int num, index, i;
    int bin[INT_SIZE];
    cout << "Enter Any Number: ";
    cin >> num;
    index = INT_SIZE - 1;
    while(index >= 0)
    {
        bin[index] = num & 1;
        index--;
        num >>= 1;
    }
    cout << "Converted Binary: ";
    for(i = 0; i < INT_SIZE; i++)
    {
        cout << bin[i];
    }
    cout << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: 5
Converted Binary: 00000000000000000000000000000101
\end{verbatim}
\clearpage

\subsection{Swap Two Numbers Using Bitwise Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Swap Two Numbers Using Bitwise Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num1, num2;
    cout << "Before Swapping:" << endl;
    cout << "````````````````" << endl;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    num1 ^= num2;
    num2 ^= num1;
    num1 ^= num2;
    cout << "After Swapping:" << endl;
    cout << "```````````````" << endl;
    cout << "Number 01: " << num1 << endl;
    cout << "Number 02: " << num2 << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Before Swapping:
````````````````
Enter 1st Number: 10
Enter 2nd Number: 20
After Swapping:
```````````````
Number 01: 20
Number 02: 10
\end{verbatim}
\clearpage

\subsection{Check Least Significant Bit (LSB) of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Least Significant Bit (LSB) of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    if(num & 1)
        cout << "LSB of " << num << " is set (1)" << endl;
    else
        cout << "LSB of " << num << " is not set (0)" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 7
LSB of 7 is set (1)
\end{verbatim}
\clearpage

\subsection{Check Most Significant Bit (MSB) of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Most Significant Bit (MSB) of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, msb;
    cout << "Enter a Number: ";
    cin >> num;
    msb = sizeof(num) * 8 - 1;
    if(num & (1 << msb))
        cout << "MSB of " << num << " is set (1)" << endl;
    else
        cout << "MSB of " << num << " is not set (0)" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: -1
MSB of -1 is set (1)
\end{verbatim}
\clearpage

\subsection{Get nth Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Get nth Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, n;
    cout << "Enter a Number: ";
    cin >> num;
    cout << "Enter the Bit Position (0-based): ";
    cin >> n;
    if(num & (1 << n))
        cout << "The " << n << "th Bit of " << num << " is 1" << endl;
    else
        cout << "The " << n << "th Bit of " << num << " is 0" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 10
Enter the Bit Position (0-based): 1
The 1th Bit of 10 is 1
\end{verbatim}
\clearpage

\subsection{Set nth Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Set nth Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, n;
    cout << "Enter a Number: ";
    cin >> num;
    cout << "Enter the Bit Position to set (0-based): ";
    cin >> n;
    num = num | (1 << n);
    cout << "After Setting the " << n << "th Bit, the Number is: " << num << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 8
Enter the Bit Position to set (0-based): 2
After Setting the 2th Bit, the Number is: 12
\end{verbatim}
\clearpage

\subsection{Clear nth Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Clear nth Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, n;
    cout << "Enter a Number: ";
    cin >> num;
    cout << "Enter the Bit Position to clear (0-based): ";
    cin >> n;
    num = num & ~(1 << n);
    cout << "After Clearing the " << n << "th Bit, the Number is: " << num << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 15
Enter the Bit Position to clear (0-based): 1
After Clearing the 1th Bit, the Number is: 13
\end{verbatim}
\clearpage

\subsection{Toggle nth Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Toggle nth Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, n;
    cout << "Enter a Number: ";
    cin >> num;
    cout << "Enter the Bit Position to Toggle (0-based): ";
    cin >> n;
    num = num ^ (1 << n);
    cout << "After Toggling the " << n << "th Bit, the Number is: " << num << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 10
Enter the Bit Position to Toggle (0-based): 2
After Toggling the 2th Bit, the Number is: 14
\end{verbatim}
\clearpage

\subsection{Get Highest Set Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Get Highest Set Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    if(num == 0)
    {
        cout << "No set Bits in 0" << endl;
        return 0;
    }
    int pos = 0;
    while(num)
    {
        num >>= 1;
        pos++;
    }
    cout << "Highest set Bit Position (0-based) is: " << pos - 1 << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 16
Highest set Bit Position (0-based) is: 4
\end{verbatim}
\clearpage

\subsection{Get Lowest Set Bit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Get Lowest Set Bit of a Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    if(num == 0)
    {
        cout << "No set Bits in 0" << endl;
        return 0;
    }
    int pos = 0;
    while(!(num & 1))
    {
        num >>= 1;
        pos++;
    }
    cout << "Lowest set Bit Position (0-based) is: " << pos << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 12
Lowest set Bit Position (0-based) is: 2
\end{verbatim}
\clearpage

\subsection{Count Trailing Zeros in a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Trailing Zeros in a Binary Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    if(num == 0)
    {
        cout << "Number is 0, all Bits are Zero" << endl;
        return 0;
    }
    int count = 0;
    while(!(num & 1))
    {
        count++;
        num >>= 1;
    }
    cout << "Number of Trailing Zeros: " << count << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 16
Number of Trailing Zeros: 4
\end{verbatim}
\clearpage

\subsection{Count Leading Zeros in a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Leading Zeros in a Binary Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    if(num == 0)
    {
        cout << "Number is 0, all Bits are Zero" << endl;
        return 0;
    }
    int count = 0;
    int msb = sizeof(num) * 8 - 1;
    while(!((num & (1 << msb)) && (msb >= 0)))
    {
        count++;
        msb--;
    }
    cout << "Number of Leading Zeros: " << count << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 15
Number of Leading Zeros: 28
\end{verbatim}
\clearpage

\subsection{Flip Bits of a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Flip Bits of a Binary Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    num = ~num;
    cout << "After Flipping all Bits, the Number is: " << num << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 10
After Flipping all Bits, the Number is: -11
\end{verbatim}
\clearpage

\subsection{Count Total Zeros and Ones in a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Total Zeros and Ones in a Binary Number}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a Number: ";
    cin >> num;
    int ones = 0, zeros = 0;
    int bits = sizeof(num) * 8;
    for(int i = 0; i < bits; i++)
    {
        if(num & (1 << i))
            ones++;
        else
            zeros++;
    }
    cout << "Total Ones: " << ones << endl;
    cout << "Total Zeros: " << zeros << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 10
Total Ones: 2
Total Zeros: 30
\end{verbatim}
\clearpage

\subsection{Rotate Bits of a Given Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Rotate Bits of a Given Number}]
#include <iostream>
using namespace std;
int main()
{
    int num, rotate;
    cout << "Enter a Number: ";
    cin >> num;
    cout << "Enter number of positions to rotate left: ";
    cin >> rotate;
    int bits = sizeof(num) * 8;
    rotate = rotate % bits;
    num = (num << rotate) | (num >> (bits - rotate));
    cout << "After rotating left by " << rotate << " positions, the number is: " << num << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a Number: 16
Enter number of positions to rotate left: 2
After rotating left by 2 positions, the number is: 64
\end{verbatim}
\clearpage

\subsection{Convert Decimal to Binary Using Bitwise Operator (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Decimal to Binary Using Bitwise Operator (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a decimal number: ";
    cin >> num;
    cout << "Binary representation of " << num << ": ";
    int bits = sizeof(num) * 8;
    for(int i = bits - 1; i >= 0; i--)
    {
        if(num & (1 << i))
            cout << "1";
        else
            cout << "0";
    }
    cout << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 10
Binary representation of 10: 00000000000000000000000000001010
\end{verbatim}
\clearpage

\subsection{Check Whether a Number is Even or Odd Using Bitwise Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check Whether a Number is Even or Odd Using Bitwise Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter a number: ";
    cin >> num;
    if(num & 1)
        cout << num << " is odd" << endl;
    else
        cout << num << " is even" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter a number: 7
7 is odd
\end{verbatim}
\clearpage

\subsection{Even or Odd Using Conditional \& Bitwise Operator}
\vspace{0.5cm}
\begin{lstlisting}[caption={Even or Odd Using Conditional \& Bitwise Operator}]
#include <iostream>
using namespace std;
int main()
{
    int num;
    cout << "Enter Any Number: ";
    cin >> num;
    (num & 1) ? cout << num << " is odd" << endl : 
        cout << num << " is even" << endl;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter Any Number: 9
9 is odd
\end{verbatim}
\clearpage


\section{Loop Programming Exercises}

\subsection{Print n Number Using For Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number Using For Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, n;
    cout << "Enter Number of Series: ";
    cin >> n;
    for (i = 1; i <= n; i++)
    {
        cout << setw(2) << i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Number of Series: 3
1
2
3
\end{verbatim}
\newpage

\subsection{Print n Number of C Programming Using For Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number of C Programming Using For Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, n;
    cout << "Enter the Number of Series: ";
    cin >> n;
    for (i = 1; i <= n; i++)
    {
        cout << setw(2) << i << "\n";
        cout << "C Programming\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Number of Series: 2
1
C Programming
2
C Programming
\end{verbatim}
\newpage

\subsection{Print n Number Using While Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number Using While Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i = 1, n;
    cout << "Enter the Number of Series: ";
    cin >> n;
    while (i <= n)
    {
        cout << setw(2) << i << "\n";
        i++;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Number of Series: 3
1
2
3
\end{verbatim}
\newpage

\subsection{Print n Number of C Programming Using While Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number of C Programming Using While Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i = 1, n;
    cout << "Enter the Number of Series: ";
    cin >> n;
    while (i <= n)
    {
        cout << setw(2) << i << "\n";
        cout << "C Programming\n";
        i++;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Number of Series: 2
1
C Programming
2
C Programming
\end{verbatim}
\newpage

\subsection{Print n Number Using Do While Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number Using Do While Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i = 1, n;
    cout << "Enter the Number of Series: ";
    cin >> n;
    do
    {
        cout << setw(2) << i << "\n";
        i++;
    } while (i <= n);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Number of Series: 3
1
2
3
\end{verbatim}
\newpage

\subsection{Print n Number of C Programming Using Do While Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Number of C Programming Using Do While Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i = 1, n;
    cout << "Enter the Number of Series: ";
    cin >> n;
    do
    {
        cout << setw(2) << i << "\n";
        cout << "C Programming\n";
        i++;
    } while (i <= n);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Number of Series: 2
1
C Programming
2
C Programming
\end{verbatim}
\newpage

\subsection{Print Even Number Using For Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Even Number Using For Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, n;
    cout << "Enter the Last Number: ";
    cin >> n;
    for (i = 2; i <= n; i += 2)
    {
        cout << setw(2) << i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Last Number: 6
2
4
6
\end{verbatim}
\newpage

\subsection{Print Odd Number Using For Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Odd Number Using For Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, n;
    cout << "Enter the Last Number: ";
    cin >> n;
    for (i = 1; i <= n; i += 2)
    {
        cout << setw(2) << i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter the Last Number: 5
1
3
5
\end{verbatim}
\newpage

\subsection{Use of Break \& Continue Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Use of Break \& Continue Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i;
    for (i = 1; i < 20; i++)
    {
        if (i % 3 == 0)
            continue;
        cout << setw(2) << i << "\n";
        if (i == 10)
            break;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
1
2
4
5
7
8
10
\end{verbatim}
\newpage

\subsection{Use of Goto Loop}
\vspace{0.5cm}
\begin{lstlisting}[caption={Use of Goto Loop}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i = 1;
again:
    cout << setw(2) << i << "\n";
    i++;
    if (i < 5)
        goto again;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
1
2
3
4
\end{verbatim}
\newpage

\subsection{Print n Multiplication Table}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Multiplication Table}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, i, n;
    cout << "Enter Any Number: ";
    cin >> num;
    cout << "Enter the Number of Series: ";
    cin >> n;
    for (i = 1; i <= n; i++)
    {
        cout << num << " X " << setw(2) << i << " = " << setw(2) << num * i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 3
Enter the Number of Series: 4
3 X 1 = 3
3 X 2 = 6
3 X 3 = 9
3 X 4 = 12
\end{verbatim}
\newpage

\subsection{Print Multiplication Table}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Multiplication Table}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, i;
    cout << "Enter Any Number: ";
    cin >> num;
    for (i = 1; i <= 10; i++)
    {
        cout << num << " X " << setw(2) << i << " = " << setw(2) << num * i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 2
2 X 1 = 2
2 X 2 = 4
2 X 3 = 6
2 X 4 = 8
2 X 5 = 10
2 X 6 = 12
2 X 7 = 14
2 X 8 = 16
2 X 9 = 18
2 X 10 = 20
\end{verbatim}
\newpage

\subsection{Factorial of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Factorial of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, n;
    unsigned long long fact = 1;
    cout << "Enter any Number: ";
    cin >> n;
    if (n < 0) {
        cout << "Factorial not defined for negative numbers\n";
        return 0;
    }
    for (i = 1; i <= n; i++)
    {
        fact *= i;
    }
    cout << "Factorial of " << n << ": " << fact << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter any Number: 5
Factorial of 5: 120
\end{verbatim}
\newpage

\subsection{Check a Prime Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Prime Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, i, count = 0;
    cout << "Enter Positive Number: ";
    cin >> num;
    if (num <= 1)
    {
        count = 1;
    }
    for (i = 2; i < num; i++)
    {
        if (num % i == 0)
        {
            count = 1;
            break;
        }
    }
    if (count == 0)
    {
        cout << num << " is a Prime Number\n";
    }
    else
    {
        cout << num << " is not a Prime Number\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Positive Number: 7
7 is a Prime Number
\end{verbatim}
\newpage

\subsection{Check a Prime Number using \{ / \}}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Prime Number using \{ / \}}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, i, count = 0;
    cout << "Enter Positive Number: ";
    cin >> num;
    if (num <= 1)
    {
        count = 1;
    }
    for (i = 2; i <= (num / 2); i++)
    {
        if (num % i == 0)
        {
            count = 1;
            break;
        }
    }
    if (count == 0)
    {
        cout << num << " is a Prime Number\n";
    }
    else
    {
        cout << num << " is not a Prime Number\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Positive Number: 11
11 is a Prime Number
\end{verbatim}
\newpage

\subsection{Check a Prime Number using \{sqrt\}}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check a Prime Number using \{sqrt\}}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, i, count = 0;
    cout << "Enter Positive Number: ";
    cin >> num;
    if (num <= 1)
    {
        count = 1;
    }
    for (i = 2; i <= sqrt(num); i++)
    {
        if (num % i == 0)
        {
            count = 1;
            break;
        }
    }
    if (count == 0)
    {
        cout << num << " is a Prime Number\n";
    }
    else
    {
        cout << num << " is not a Prime Number\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Positive Number: 13
13 is a Prime Number
\end{verbatim}
\newpage

\subsection{Print n Prime Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print n Prime Number}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, i, n, count;
    cout << "Enter Ending Number: ";
    cin >> n;
    for (num = 2; num <= n; num++)
    {
        count = 0;
        if (num <= 1)
        {
            count = 1;
        }
        for (i = 2; i <= sqrt(num); i++)
        {
            if (num % i == 0)
            {
                count = 1;
                break;
            }
        }
        if (count == 0)
        {
            cout << num << " is Prime Number\n";
        }
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Ending Number: 10
2 is Prime Number
3 is Prime Number
5 is Prime Number
7 is Prime Number
\end{verbatim}
\newpage

\subsection{Print \& Count n Prime Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print \& Count n Prime Number}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, i, n, count, total = 0;
    cout << "Enter Ending Number: ";
    cin >> n;
    for (num = 2; num <= n; num++)
    {
        count = 0;
        if (num <= 1)
        {
            count = 1;
        }
        for (i = 2; i <= sqrt(num); i++)
        {
            if (num % i == 0)
            {
                count = 1;
                break;
            }
        }
        if (count == 0)
        {
            cout << setw(2) << num << " ";
            total++;
        }
    }
    cout << "\n\nTotal Prime Numbers: " << total << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Ending Number: 10
2 3 5 7 
Total Prime Numbers: 4
\end{verbatim}
\newpage

\subsection{Print, Count \& Sum n Prime Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print, Count \& Sum n Prime Number}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, i, n, count, total = 0, sum = 0;
    cout << "Enter Ending Number: ";
    cin >> n;
    for (num = 2; num <= n; num++)
    {
        count = 0;
        if (num <= 1)
        {
            count = 1;
        }
        for (i = 2; i <= sqrt(num); i++)
        {
            if (num % i == 0)
            {
                count = 1;
                break;
            }
        }
        if (count == 0)
        {
            cout << setw(2) << num << " ";
            total++;
            sum += num;
        }
    }
    cout << "\nTotal Prime Numbers: " << total << "\n";
    cout << "Sum of Prime Numbers: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Ending Number: 10
2 3 5 7 
Total Prime Numbers: 4
Sum of Prime Numbers: 17
\end{verbatim}
\newpage

\subsection{Print, Count \& Sum m to n Prime Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print, Count \& Sum m to n Prime Number}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, i, m, n, count, total = 0, sum = 0;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    for (num = m; num <= n; num++)
    {
        count = 0;
        if (num <= 1)
        {
            count = 1;
        }
        for (i = 2; i <= sqrt(num); i++)
        {
            if (num % i == 0)
            {
                count = 1;
                break;
            }
        }
        if (count == 0)
        {
            cout << setw(2) << num << " ";
            total++;
            sum += num;
        }
    }
    cout << "\nTotal Prime Numbers: " << total << "\n";
    cout << "Sum of Prime Numbers: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 5
Enter Ending Number: 15
5 7 11 13 
Total Prime Numbers: 4
Sum of Prime Numbers: 36
\end{verbatim}
\newpage

\subsection{Print the Reverse Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print the Reverse Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, sum = 0, temp, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        rem = (temp % 10);
        sum = (sum * 10) + rem;
        temp = temp / 10;
    }
    cout << "Reverse Number: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 123
Reverse Number: 321
\end{verbatim}
\newpage

\subsection{Check the Number is Palindrome}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Palindrome}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, sum = 0, temp, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        rem = (temp % 10);
        sum = (sum * 10) + rem;
        temp = temp / 10;
    }
    if (num == sum)
        cout << num << " is a Palindrome Number";
    else
        cout << num << " is not a Palindrome Number";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 121
121 is a Palindrome Number
\end{verbatim}
\newpage

\subsection{Print m to n Palindrome Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Palindrome Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, m, n, rem, rev, temp;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Palindrome numbers are: ";
    for (num = m; num <= n; num++)
    {
        temp = num;
        rev = 0;
        while (temp != 0)
        {
            rem = temp % 10;
            temp = temp / 10;
            rev = rev * 10 + rem;
        }
        if (num == rev)
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 100
Enter Ending Number: 200
Palindrome numbers are: 101 111 121 131 141 151 161 171 181 191
\end{verbatim}
\newpage

\subsection{Check the Number is Armstrong}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Armstrong}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, sum = 0, temp, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        rem = (temp % 10);
        sum = sum + (rem * rem * rem);
        temp = temp / 10;
    }
    if (num == sum)
        cout << num << " is a Armstrong Number";
    else
        cout << num << " is not a Armstrong Number";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 153
153 is a Armstrong Number
\end{verbatim}
\newpage

\subsection{Print m to n Armstrong Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Armstrong Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, m, n, rem, sum, temp;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Armstrong numbers are: ";
    for (num = m; num <= n; num++)
    {
        temp = num;
        sum = 0;
        while (temp != 0)
        {
            rem = temp % 10;
            temp = temp / 10;
            sum = sum + (rem * rem * rem);
        }
        if (num == sum)
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 100
Enter Ending Number: 200
Armstrong numbers are: 153
\end{verbatim}
\newpage

\subsection{Check the Number is Perfect}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Perfect}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num, sum = 0, temp;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    for (i = 1; i <= (temp / 2); i++)
    {
        if (temp % i == 0)
        {
            sum = sum + i;
        }
    }
    if ((sum == num) && (num > 0))
    {
        cout << num << " is a Perfect number";
    }
    else
    {
        cout << num << " is Not a Perfect number";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 28
28 is a Perfect number
\end{verbatim}
\newpage

\subsection{Print m to n Perfect Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Perfect Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num, m, n, sum, temp;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Perfect Numbers are: ";
    for (num = m; num <= n; num++)
    {
        temp = num;
        sum = 0;
        for (i = 1; i <= (temp / 2); i++)
        {
            if (temp % i == 0)
            {
                sum = sum + i;
            }
        }
        if ((sum == num) && (num > 0))
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 1
Enter Ending Number: 200
Perfect Numbers are: 6 28
\end{verbatim}
\newpage

\subsection{Check the Number is Strong}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Strong}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, sum = 0, rem, temp, i, fact;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        rem = temp % 10;
        fact = 1;
        for (i = 1; i <= rem; i++)
        {
            fact = fact * i;
        }
        sum = sum + fact;
        temp = temp / 10;
    }
    if (sum == num)
        cout << num << " is a Strong Number";
    else
        cout << num << " is not a Strong Number";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 145
145 is a Strong Number
\end{verbatim}
\newpage

\subsection{Print m to n Strong Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Strong Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num, m, n, sum, temp, fact, rem;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Strong Numbers are: ";
    for (num = m; num <= n; num++)
    {
        temp = num;
        sum = 0;
        while (temp != 0)
        {
            rem = temp % 10;
            fact = 1;
            for (i = 1; i <= rem; i++) {
                fact = fact * i;
            }
            sum = sum + fact;
            temp = temp / 10;
        }
        if ((sum == num) && (num > 0))
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 1
Enter Ending Number: 200
Strong Numbers are: 1 2 145
\end{verbatim}
\newpage

\subsection{Check the Number is Neon}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Neon}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, square, sum = 0, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    square = num * num;
    while (square != 0)
    {
        rem = square % 10;
        sum = sum + rem;
        square = square / 10;
    }
    if (sum == num)
        cout << num << " is a Neon Number\n";
    else
        cout << num << " is not a Neon Number\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 9
9 is a Neon Number
\end{verbatim}
\newpage

\subsection{Print m to n Neon Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Neon Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num, m, n, rem, square, sum;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Neon Numbers are: ";
    for (num = m; num <= n; num++)
    {
        sum = 0;
        square = num * num;
        while (square != 0)
        {
            rem = square % 10;
            sum = sum + rem;
            square = square / 10;
        }
        if (sum == num)
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 1
Enter Ending Number: 200
Neon Numbers are: 1 9
\end{verbatim}
\newpage

\subsection{Check the Number is Magic}
\vspace{0.5cm}
\begin{lstlisting}[caption={Check the Number is Magic}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, temp, sum, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp >= 10)
    {
        sum = 0;
        while (temp > 0)
        {
            rem = temp % 10;
            sum = sum + rem;
            temp = temp / 10;
        }
        temp = sum;
    }
    if (temp == 1)
        cout << num << " is a Magic Number\n";
    else
        cout << num << " is not a Magic Number\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 10
10 is a Magic Number
\end{verbatim}
\newpage

\subsection{Print m to n Magic Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print m to n Magic Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int m, n, num, temp, sum, rem;
    cout << "Enter Starting Number: ";
    cin >> m;
    cout << "Enter Ending Number: ";
    cin >> n;
    cout << "Magic Numbers are: ";
    for (num = m; num <= n; num++) {
        temp = num;
        while (temp >= 10)
        {
            sum = 0;
            while (temp != 0)
            {
                rem = temp % 10;
                sum = sum + rem;
                temp = temp / 10;
            }
            temp = sum;
        }
        if (temp == 1)
            cout << num << " ";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Starting Number: 1
Enter Ending Number: 100
Magic Numbers are: 1 10 19 28 37 46 55 64 73 82 91 100
\end{verbatim}
\newpage

\subsection{Find First and Last Digit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find First and Last Digit of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, first, last;
    cout << "Enter a number: ";
    cin >> num;
    last = num % 10;
    while (num >= 10)
    {
        num = num / 10;
    }
    first = num;
    cout << "First digit = " << first << ", Last digit = " << last << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a number: 1234
First digit = 1, Last digit = 4
\end{verbatim}
\newpage

\subsection{Swap First and Last Digits of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Swap First and Last Digits of a Number}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int num, original, last, first, digits, swapped;
    cout << "Enter a number: ";
    cin >> num;
    original = num;
    last = num % 10;
    while (num >= 10)
    {
        num = num / 10;
    }
    first = num;
    digits = 0;
    num = original;
    while (num != 0)
    {
        digits++;
        num = num / 10;
    }
    num = original;
    swapped = last;
    swapped = swapped * (int)pow(10, digits - 1) + (num % (int)pow(10, digits - 1)) / 10 * 10 + first;
    cout << "After swapping: " << swapped << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a number: 1234
After swapping: 4231
\end{verbatim}
\newpage

\subsection{Counting Digit of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Counting Digit of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, temp, count = 0;
    cout << "Enter any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        temp = temp / 10;
        ++count;
    }
    cout << "Total Digit in " << num << " is: " << count << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter any Number: 1234
Total Digit in 1234 is: 4
\end{verbatim}
\newpage

\subsection{Find Frequency of Each Digit in a Given Integer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Frequency of Each Digit in a Given Integer}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, digit, freq[10] = {0};
    cout << "Enter a number: ";
    cin >> num;
    while (num != 0)
    {
        digit = num % 10;
        freq[digit]++;
        num = num / 10;
    }
    cout << "Frequency of digits:\n";
    for (int i = 0; i < 10; i++)
    {
        if (freq[i] > 0)
            cout << "Digit " << i << ": " << freq[i] << " times\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a number: 1223
Frequency of digits:
Digit 1: 1 times
Digit 2: 2 times
Digit 3: 1 times
\end{verbatim}
\newpage

\subsection{Find Sum of the Digits of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Sum of the Digits of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, sum = 0, temp, rem;
    cout << "Enter Any Number: ";
    cin >> num;
    temp = num;
    while (temp != 0)
    {
        rem = (temp % 10);
        sum = sum + rem;
        temp = temp / 10;
    }
    cout << "Sum of Digits: " << sum << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 123
Sum of Digits: 6
\end{verbatim}
\newpage

\subsection{Find Product of Digits of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Product of Digits of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num, product = 1;
    cout << "Enter Any Number: ";
    cin >> num;
    product = ((num == 0) ? 0 : 1);
    while (num != 0)
    {
        product = product * (num % 10);
        num = num / 10;
    }
    cout << "Product of Digits: " << product;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 123
Product of Digits: 6
\end{verbatim}
\newpage

\subsection{Enter a Number and Print It in Words}
\vspace{0.5cm}
\begin{lstlisting}[caption={Enter a Number and Print It in Words}]
#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
int main()
{
    int num;
    cout << "Enter a number (1-999): ";
    cin >> num;
    if (num == 0)
    {
        cout << "zero\n";
        return 0;
    }
    string ones[] = {"", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
    string teens[] = {"", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    string tens[] = {"", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
    if (num > 999 || num < 0)
    {
        cout << "Invalid input\n";
        return 0;
    }
    int hundreds = num / 100;
    int remainder = num % 100;
    int tens_digit = remainder / 10;
    int ones_digit = remainder % 10;
    if (hundreds > 0)
    {
        cout << ones[hundreds] << " hundred";
        if (remainder > 0)
            cout << " and ";
    }
    if (remainder > 0)
    {
        if (tens_digit == 1 && ones_digit > 0)
        {
            cout << teens[ones_digit];
        }
        else
        {
            if (tens_digit > 0)
                cout << tens[tens_digit];
            if (ones_digit > 0)
                cout << " " << ones[ones_digit];
        }
    }
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a number (1-999): 123
one hundred and twenty three
\end{verbatim}
\newpage

\subsection{Find Power of Any Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Power of Any Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int base, exponent, i, power = 1;
    cout << "Enter Base: ";
    cin >> base;
    cout << "Enter Exponent: ";
    cin >> exponent;
    for (i = 1; i <= exponent; i++)
    {
        power = power * base;
    }
    cout << "\nThe Result is: " << power;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Base: 2
Enter Exponent: 3
The Result is: 8
\end{verbatim}
\newpage

\subsection{Find Factors of Any Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Factors of Any Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num;
    cout << "Enter Any Number: ";
    cin >> num;
    cout << "\nAll Factors of " << num << ": \n";
    for (i = 1; i <= num; i++)
    {
        if (num % i == 0)
        {
            if (i < num)
                cout << i << ", ";
            else
                cout << i;
        }
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 12
All Factors of 12: 
1, 2, 3, 4, 6, 12
\end{verbatim}
\newpage

\subsection{Find Prime Factors of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Prime Factors of a Number}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, j, num, count, first;
    cout << "Enter Any Number: ";
    cin >> num;
    cout << "\nAll Prime Factors of " << num << ":\n";
    first = 1;
    for (i = 2; i <= num; i++)
    {
        if (num % i == 0)
        {
            count = 0;
            for (j = 2; j <= i / 2; j++)
            {
                if (i % j == 0)
                {
                    count = 1;
                    break;
                }
            }
            if (count == 0)
            {
                if (!first)
                {
                    cout << ", ";
                }
                cout << i;
                first = 0;
            }
        }
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Any Number: 12
All Prime Factors of 12:
2, 3
\end{verbatim}
\newpage

\subsection{Print GCD \& LCM of Two Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print GCD \& LCM of Two Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num1, num2, n1, n2, rem, gcd, lcm;
    cout << "Enter 1st Number: ";
    cin >> num1;
    cout << "Enter 2nd Number: ";
    cin >> num2;
    n1 = num1;
    n2 = num2;
    while (n2 != 0)
    {
        rem = n1 % n2;
        n1 = n2;
        n2 = rem;
    }
    gcd = n1;
    lcm = (num1 * num2) / gcd;
    cout << "GCD = " << gcd << "\n";
    cout << "LCM = " << lcm << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter 1st Number: 12
Enter 2nd Number: 18
GCD = 6
LCM = 36
\end{verbatim}
\newpage

\subsection{Find LCM of Two Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find LCM of Two Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num1, num2, max, lcm = 1;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    max = ((num1 > num2) ? num1 : num2);
    i = max;
    while (1)
    {
        if ((i % num1 == 0) && (i % num2 == 0))
        {
            lcm = i;
            break;
        }
        i += max;
    }
    cout << "\nLCM of " << num1 << " & " << num2 << ": " << lcm << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 4 6
LCM of 4 & 6: 12
\end{verbatim}
\newpage

\subsection{Find GCD of Two Numbers}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find GCD of Two Numbers}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i, num1, num2, min, gcd = 1;
    cout << "Enter Two Numbers: ";
    cin >> num1 >> num2;
    min = ((num1 < num2) ? num1 : num2);
    for (i = 1; i <= min; i++)
    {
        if ((num1 % i == 0) && (num2 % i == 0))
        {
            gcd = i;
        }
    }
    cout << "\nGCD of " << num1 << " & " << num2 << ": " << gcd << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter Two Numbers: 12 18
GCD of 12 & 18: 6
\end{verbatim}
\newpage

\subsection{Print ASCII Values of ASCII Character}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print ASCII Values of ASCII Character}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int i;
    for (i = 0; i <= 255; i++)
    {
        cout << "ASCII Value of Character " << (char)i << ": " << i << "\n";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
ASCII Value of Character : 0
ASCII Value of Character !: 33
...
ASCII Value of Character ~: 126
ASCII Value of Character : 127
...
(continues up to 255)
\end{verbatim}
\newpage

\subsection{Find 1's Complement of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find 1's Complement of a Number}]
#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
const int SIZE = 8;
int main()
{
    string binary, OnesComp(SIZE, '0');
    int i, error = 0;
    cout << "Enter " << SIZE << " Bit Binary Value: ";
    cin >> binary;
    if (binary.length() != SIZE)
    {
        cout << "Invalid Input!!!";
        return 0;
    }
    for (i = 0; i < SIZE; i++)
    {
        if (binary[i] == '1')
        {
            OnesComp[i] = '0';
        }
        else if (binary[i] == '0')
        {
            OnesComp[i] = '1';
        }
        else
        {
            cout << "Invalid Input!!!";
            error = 1;
            break;
        }
    }
    if (error == 0)
    {
        cout << "\n1's Complement: " << OnesComp;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter 8 Bit Binary Value: 10101010
1's Complement: 01010101
\end{verbatim}
\newpage

\subsection{Find 2's Complement of a Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find 2's Complement of a Number}]
#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
const int SIZE = 8;
int main()
{
    string binary, OnesComp(SIZE, '0'), TwosComp(SIZE, '0');
    int i, carry = 1;
    cout << "Enter " << SIZE << " Bit Binary Value: ";
    cin >> binary;
    if (binary.length() != SIZE)
    {
        cout << "Invalid Input!!!";
        return 0;
    }
    for (i = 0; i < SIZE; i++)
    {
        if (binary[i] == '1')
        {
            OnesComp[i] = '0';
        }
        else if (binary[i] == '0')
        {
            OnesComp[i] = '1';
        }
        else
        {
            cout << "Invalid Input!!!";
            return 0;
        }
    }
    for (i = SIZE - 1; i >= 0; i--)
    {
        if ((OnesComp[i] == '1') && (carry == 1))
        {
            TwosComp[i] = '0';
        }
        else if ((OnesComp[i] == '0') && (carry == 1))
        {
            TwosComp[i] = '1';
            carry = 0;
        }
        else
        {
            TwosComp[i] = OnesComp[i];
        }
    }
    cout << "\n1's Complement: " << OnesComp << "\n";
    cout << "\n2's Complement: " << TwosComp << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter 8 Bit Binary Value: 10101010
1's Complement: 01010101
2's Complement: 01010110
\end{verbatim}
\newpage

\subsection{Find 1’s Complement of a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find 1’s Complement of a Binary Number}]
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;
int main()
{
    int num;
    vector<int> bin, comp;
    cout << "Enter a decimal number: ";
    cin >> num;
    while (num > 0)
    {
        bin.push_back(num % 2);
        num /= 2;
    }
    cout << "Binary: ";
    for (int j = bin.size() - 1; j >= 0; j--)
        cout << bin[j];
    cout << "\nOne's Complement: ";
    for (int j = bin.size() - 1; j >= 0; j--)
        cout << (bin[j] == 0 ? 1 : 0);
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 13
Binary: 1101
One's Complement: 0010
\end{verbatim}
\newpage

\subsection{Find 2’s Complement of a Binary Number}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find 2’s Complement of a Binary Number}]
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;
int main()
{
    int num, carry = 1;
    vector<int> bin, comp;
    cout << "Enter a decimal number: ";
    cin >> num;
    while (num > 0)
    {
        bin.push_back(num % 2);
        num /= 2;
    }
    cout << "Binary: ";
    for (int j = bin.size() - 1; j >= 0; j--)
        cout << bin[j];
    cout << "\nOne's Complement: ";
    for (int j = bin.size() - 1; j >= 0; j--)
    {
        comp.push_back(bin[j] == 0 ? 1 : 0);
        cout << comp.back();
    }
    cout << "\nTwo's Complement: ";
    for (int j = bin.size() - 1; j >= 0; j--)
    {
        if (comp[j] == 0 && carry == 1)
        {
            comp[j] = 1;
            carry = 0;
        }
        else if (comp[j] == 1 && carry == 1)
        {
            comp[j] = 0;
        }
        cout << comp[j];
    }
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 13
Binary: 1101
One's Complement: 0010
Two's Complement: 0011
\end{verbatim}
\newpage

\subsection{Convert Binary to Octal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Binary to Octal Number System}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int bin, oct = 0, dec = 0, i = 0;
    cout << "Enter a binary number: ";
    cin >> bin;
    while (bin != 0)
    {
        dec += (bin % 10) * pow(2, i);
        i++;
        bin /= 10;
    }
    i = 1;
    while (dec != 0)
    {
        oct += (dec % 8) * i;
        dec /= 8;
        i *= 10;
    }
    cout << "Octal number: " << oct << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a binary number: 1101
Octal number: 15
\end{verbatim}
\newpage

\subsection{Convert Binary to Decimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Binary to Decimal Number System}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int bin, dec = 0, i = 0;
    cout << "Enter a binary number: ";
    cin >> bin;
    while (bin != 0)
    {
        dec += (bin % 10) * pow(2, i);
        i++;
        bin /= 10;
    }
    cout << "Decimal number: " << dec << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a binary number: 1101
Decimal number: 13
\end{verbatim}
\newpage

\subsection{Convert Binary to Hexadecimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Binary to Hexadecimal Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
#include <cmath>
using namespace std;
int main()
{
    int bin, dec = 0, i = 0;
    vector<int> hex;
    char hexChar[] = "0123456789ABCDEF";
    cout << "Enter a binary number: ";
    cin >> bin;
    while (bin != 0)
    {
        dec += (bin % 10) * pow(2, i);
        i++;
        bin /= 10;
    }
    while (dec != 0)
    {
        hex.push_back(dec % 16);
        dec /= 16;
    }
    cout << "Hexadecimal number: ";
    for (int k = hex.size() - 1; k >= 0; k--)
        cout << hexChar[hex[k]];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a binary number: 1101
Hexadecimal number: D
\end{verbatim}
\newpage

\subsection{Convert Octal to Binary Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Octal to Binary Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
#include <cmath>
using namespace std;
int main()
{
    int oct, dec = 0, i = 0;
    vector<int> bin;
    cout << "Enter an octal number: ";
    cin >> oct;
    while (oct != 0)
    {
        dec += (oct % 10) * pow(8, i);
        i++;
        oct /= 10;
    }
    while (dec > 0)
    {
        bin.push_back(dec % 2);
        dec /= 2;
    }
    cout << "Binary number: ";
    for (int j = bin.size() - 1; j >= 0; j--)
        cout << bin[j];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter an octal number: 15
Binary number: 1101
\end{verbatim}
\newpage

\subsection{Convert Octal to Decimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Octal to Decimal Number System}]
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;
int main()
{
    int oct, dec = 0, i = 0;
    cout << "Enter an octal number: ";
    cin >> oct;
    while (oct != 0)
    {
        dec += (oct % 10) * pow(8, i);
        i++;
        oct /= 10;
    }
    cout << "Decimal number: " << dec << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter an octal number: 15
Decimal number: 13
\end{verbatim}
\newpage

\subsection{Convert Octal to Hexadecimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Octal to Hexadecimal Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
#include <cmath>
using namespace std;
int main()
{
    int oct, dec = 0, i = 0;
    vector<int> hex;
    char hexChar[] = "0123456789ABCDEF";
    cout << "Enter an octal number: ";
    cin >> oct;
    while (oct != 0)
    {
        dec += (oct % 10) * pow(8, i);
        i++;
        oct /= 10;
    }
    while (dec > 0)
    {
        hex.push_back(dec % 16);
        dec /= 16;
    }
    cout << "Hexadecimal number: ";
    for (int k = hex.size() - 1; k >= 0; k--)
        cout << hexChar[hex[k]];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter an octal number: 15
Hexadecimal number: D
\end{verbatim}
\newpage

\subsection{Convert Decimal to Binary Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Decimal to Binary Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;
int main()
{
    int dec;
    vector<int> bin;
    cout << "Enter a decimal number: ";
    cin >> dec;
    while (dec > 0)
    {
        bin.push_back(dec % 2);
        dec /= 2;
    }
    cout << "Binary number: ";
    for (int j = bin.size() - 1; j >= 0; j--)
        cout << bin[j];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 13
Binary number: 1101
\end{verbatim}
\newpage

\subsection{Convert Decimal to Octal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Decimal to Octal Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;
int main()
{
    int dec;
    vector<int> oct;
    cout << "Enter a decimal number: ";
    cin >> dec;
    while (dec > 0)
    {
        oct.push_back(dec % 8);
        dec /= 8;
    }
    cout << "Octal number: ";
    for (int j = oct.size() - 1; j >= 0; j--)
        cout << oct[j];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 13
Octal number: 15
\end{verbatim}
\newpage

\subsection{Convert Decimal to Hexadecimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Decimal to Hexadecimal Number System}]
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;
int main()
{
    int dec;
    vector<int> hex;
    char hexChar[] = "0123456789ABCDEF";
    cout << "Enter a decimal number: ";
    cin >> dec;
    while (dec > 0)
    {
        hex.push_back(dec % 16);
        dec /= 16;
    }
    cout << "Hexadecimal number: ";
    for (int j = hex.size() - 1; j >= 0; j--)
        cout << hexChar[hex[j]];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a decimal number: 13
Hexadecimal number: D
\end{verbatim}
\newpage

\subsection{Convert Hexadecimal to Binary Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Hexadecimal to Binary Number System}]
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
using namespace std;
int main()
{
    string hex;
    vector<int> bin;
    cout << "Enter a hexadecimal number: ";
    cin >> hex;
    for (char c : hex)
    {
        int value;
        if (c >= '0' && c <= '9')
            value = c - '0';
        else
            value = toupper(c) - 'A' + 10;
        for (int j = 3; j >= 0; j--)
        {
            bin.push_back((value >> j) & 1);
        }
    }
    cout << "Binary number: ";
    bool leading = true;
    for (int b : bin)
    {
        if (b == 0 && leading)
            continue;
        leading = false;
        cout << b;
    }
    if (leading) cout << "0";
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a hexadecimal number: D
Binary number: 1101
\end{verbatim}
\newpage

\subsection{Convert Hexadecimal to Octal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Hexadecimal to Octal Number System}]
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
using namespace std;
int main()
{
    string hex;
    int dec = 0;
    vector<int> oct;
    cout << "Enter a hexadecimal number: ";
    cin >> hex;
    for (char c : hex)
    {
        if (c >= '0' && c <= '9')
            dec = dec * 16 + (c - '0');
        else
            dec = dec * 16 + (toupper(c) - 'A' + 10);
    }
    while (dec > 0)
    {
        oct.push_back(dec % 8);
        dec /= 8;
    }
    cout << "Octal number: ";
    for (int i = oct.size() - 1; i >= 0; i--)
        cout << oct[i];
    cout << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a hexadecimal number: D
Octal number: 15
\end{verbatim}
\newpage

\subsection{Convert Hexadecimal to Decimal Number System}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert Hexadecimal to Decimal Number System}]
#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
int main()
{
    string hex;
    int dec = 0;
    cout << "Enter a hexadecimal number: ";
    cin >> hex;
    for (char c : hex)
    {
        if (c >= '0' && c <= '9')
            dec = dec * 16 + (c - '0');
        else
            dec = dec * 16 + (toupper(c) - 'A' + 10);
    }
    cout << "Decimal number: " << dec << "\n";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Enter a hexadecimal number: D
Decimal number: 13
\end{verbatim}
\newpage


\section{Pattern Programming Exercise}


\subsection{Right Angle Triangle Pattern / Right Half Pyramid Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
1 0 
1 0 1 
1 0 1 0 
1 0 1 0 1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
0 0 
1 1 1 
0 0 0 0 
1 1 1 1 1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A 
A B 
A B C 
A B C D 
A B C D E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A 
B B 
C C C 
D D D D 
E E E E E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a 
a b 
a b c 
a b c d 
a b c d e 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a 
b b 
c c c 
d d d d 
e e e e e 
\end{verbatim}
\newpage

% Section: Inverted Right Angle Triangle Pattern
\subsection{Inverted Right Angle Triangle Pattern / Inverted Right Half Pyramid Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5 
4 4 4 4 
3 3 3 
2 2 
1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1 
1 0 1 0 
1 0 1 
1 0 
1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1 
0 0 0 0 
1 1 1 
0 0 
1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E 
A B C D 
A B C 
A B 
A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E 
D D D D 
C C C 
B B 
A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e 
a b c d 
a b c 
a b 
a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Inverted Right Angle Triangle}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Inverted Right Angle Triangle}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e 
d d d d 
c c c 
b b 
a 
\end{verbatim}
\newpage

% Section: Arrow Shaped Pattern
\subsection{Arrow Shaped Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5alphabets 5 5 
4 4 4 4 
3 3 3 
2 2 
1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
1 0 
1 0 1 
1 0 1 0 
1 0 1 0 1 
1 0 1 0 
1 0 1 
1 0 
1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 
0 0 
1 1 1 
0 0 0 0 
1 1 1 1 1 
0 0 0 0 
1 1 1 
0 0 
1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A 
A B 
A B C 
A B C D 
A B C D E 
A B C D 
A B C 
A B 
A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A 
B B 
C C C 
D D D D 
E E E E E 
D D D D 
C C C 
B B 
A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a 
a b 
a b c 
a b c d 
a b c d e 
a b c d 
a b c 
a b 
a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a 
b b 
c c c 
d d d d 
e e e e e 
d d d d 
c c c 
b b 
a 
\end{verbatim}
\newpage

% Section: Mirror Right Angle Triangle Pattern
\subsection{Mirror Right Angle Triangle Pattern / Left Half Pyramid Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 2
    1 2 3
  1 2 3 4
1 2 3 4 5
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      2 2
    3 3 3
  4 4 4 4
5 5 5 5 5
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 0
    1 0 1
  1 0 1 0
1 0 1 0 1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      0 0
    1 1 1
  0 0 0 0
1 1 1 1 1
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A
      A B
    A B C
  A B C D
A B C D E
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A
      B B
    C C C
  D D D D
E E E E E
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a
      a b
    a b c
  a b c d
a b c d e
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a
      b b
    c c c
  d d d d
e e e e e
\end{verbatim}
\newpage

% Section: Mirror Inverted Right Angle Triangle Pattern
\subsection{Mirror Inverted Right Angle Triangle Pattern / Inverted Left Half Pyramid Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5
  1 2 3 4
    1 2 3
      1 2
        1
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5
  4 4 4 4
    3 3 3
      2 2
        1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1
  1 0 1 0
    1 0 1
      1 0
        1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1
  0 0 0 0
    1 1 1
      0 0
        1
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E
  A B C D
    A B C
      A B
        A
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E
  D D D D
    C C C
      B B
        A
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e
  a b c d
    a b c
      a b
        a
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e
  d d d d
    c c c
      b b
        a
\end{verbatim}
\newpage

% Section: Mirror Arrow Shaped Pattern
\subsection{Mirror Arrow Shaped Pattern}
\vspace{0.5cm}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 2
    1 2 3
  1 2 3 4
1 2 3 4 5
  1 2 3 4
    1 2 3
      1 2
        1
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row;
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      2 2
    3 3 3
  4 4 4 4
5 5 5 5 5
  4 4 4 4
    3 3 3
      2 2
        1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col % 2;
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 0
    1 0 1
  1 0 1 0
1 0 1 0 1
  1 0 1 0
    1 0 1
      1 0
        1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row % 2;
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << row % 2;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      0 0
    1 1 1
  0 0 0 0
1 1 1 1 1
  0 0 0 0
    1 1 1
      0 0
        1
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 64);
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A
      A B
    A B C
  A B C D
A B C D E
  A B C D
    A B C
      A B
        A
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 64);
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 64);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A
      B B
    C C C
  D D D D
E E E E E
  D D D D
    C C C
      B B
        A
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 96);
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(col + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a
      a b
    a b c
  a b c d
a b c d e
  a b c d
    a b c
      a b
        a
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 96);
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << char(row + 96);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a
      b b
    c c c
  d d d d
e e e e e
  d d d d
    c c c
      b b
        a
\end{verbatim}
\newpage


\subsection{Pyramid Pattern I}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      1 2 3 
    1 2 3 4 5 
  1 2 3 4 5 6 7 
1 2 3 4 5 6 7 8 9 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      2 2 2 
    3 3 3 3 3 
  4 4 4 4 4 4 4 
5 5 5 5 5 5 5 5 5 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      1 0 1 
    1 0 1 0 1 
  1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      0 0 0 
    1 1 1 1 1 
  0 0 0 0 0 0 0 
1 1 1 1 1 1 1 1 1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A 
      A B C 
    A B C D E 
  A B C D E F G 
A B C D E F G H I 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A 
      B B B 
    C C C C C 
  D D D D D D D 
E E E E E E E E E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a 
      a b c 
    a b c d e 
  a b c d e f g 
a b c d e f g h i 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a 
      b b b 
    c c c c c 
  d d d d d d d 
e e e e e e e e e 
\end{verbatim}
\newpage

\subsection{Inverted Pyramid Pattern I}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 6 7 8 9 
  1 2 3 4 5 6 7 
    1 2 3 4 5 
      1 2 3 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5 5 5 5 5 
  4 4 4 4 4 4 4 
    3 3 3 3 3 
      2 2 2 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1 0 1 0 1 
  1 0 1 0 1 0 1 
    1 0 1 0 1 
      1 0 1 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1 1 1 1 1 
  0 0 0 0 0 0 0 
    1 1 1 1 1 
      0 0 0 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E F G H I 
  A B C D E F G 
    A B C D E 
      A B C 
        A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E E E E E 
  D D D D D D D 
    C C C C C 
      B B B 
        A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e f g h i 
  a b c d e f g 
    a b c d e 
      a b c 
        a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e e e e e 
  d d d d d d d 
    c c c c c 
      b b b 
        a 
\end{verbatim}
\newpage

\subsection{Diamond Pattern I}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      1 2 3 
    1 2 3 4 5 
  1 2 3 4 5 6 7 
1 2 3 4 5 6 7 8 9 
  1 2 3 4 5 6 7 
    1 2 3 4 5 
      1 2 3 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      2 2 2 
    3 3 3 3 3 
  4 4 4 4 4 4 4 
5 5 5 5 5 5 5 5 5 
  4 4 4 4 4 4 4 
    3 3 3 3 3 
      2 2 2 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      1 0 1 
    1 0 1 0 1 
  1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 
  1 0 1 0 1 0 1 
    1 0 1 0 1 
      1 0 1 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1 
      0 0 0 
    1 1 1 1 1 
  0 0 0 0 0 0 0 
1 1 1 1 1 1 1 1 1 
  0 0 0 0 0 0 0 
    1 1 1 1 1 
      0 0 0 
        1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A 
      A B C 
    A B C D E 
  A B C D E F G 
A B C D E F G H I 
  A B C D E F G 
    A B C D E 
      A B C 
        A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        A 
      B B B 
    C C C C C 
  D D D D D D D 
E E E E E E E E E 
  D D D D D D D 
    C C C C C 
      B B B 
        A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a 
      a b c 
    a b c d e 
  a b c d e f g 
a b c d e f g h i 
  a b c d e f g 
    a b c d e 
      a b c 
        a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        a 
      b b b 
    c c c c c 
  d d d d d d d 
e e e e e e e e e 
  d d d d d d d 
    c c c c c 
      b b b 
        a 
\end{verbatim}
\newpage

\subsection{Hourglass Pattern I}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 6 7 8 9 
  1 2 3 4 5 6 7   
    1 2 3 4 5     
      1 2 3       
        1         
      1 2 3       
    1 2 3 4 5     
  1 2 3 4 5 6 7   
1 2 3 4 5 6 7 8 9 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5 5 5 5 5 
  4 4 4 4 4 4 4   
    3 3 3 3 3     
      2 2 2       
        1         
      2 2 2       
    3 3 3 3 3     
  4 4 4 4 4 4 4   
5 5 5 5 5 5 5 5 5 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1 0 1 0 1 
  1 0 1 0 1 0 1   
    1 0 1 0 1     
      1 0 1       
        1         
      1 0 1       
    1 0 1 0 1     
  1 0 1 0 1 0 1   
1 0 1 0 1 0 1 0 1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1 1 1 1 1 
  0 0 0 0 0 0 0   
    1 1 1 1 1     
      0 0 0       
        1         
      0 0 0       
    1 1 1 1 1     
  0 0 0 0 0 0 0   
1 1 1 1 1 1 1 1 1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E F G H I 
  A B C D E F G   
    A B C D E     
      A B C       
        A         
      A B C       
    A B C D E     
  A B C D E F G   
A B C D E F G H I 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E E E E E 
  D D D D D D D   
    C C C C C     
      B B B       
        A         
      B B B       
    C C C C C     
  D D D D D D D   
E E E E E E E E E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e f g h i 
  a b c d e f g   
    a b c d e     
      a b c       
        a         
      a b c       
    a b c d e     
  a b c d e f g   
a b c d e f g h i 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e e e e e 
  d d d d d d d   
    c c c c c     
      b b b       
        a         
      b b b       
    c c c c c     
  d d d d d d d   
e e e e e e e e e 
\end{verbatim}
\newpage

\subsection{Pyramid Pattern II}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   2 2 
  3 3 3 
 4 4 4 4 
5 5 5 5 5 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   1 0 
  1 0 1 
 1 0 1 0 
1 0 1 0 1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   0 0 
  1 1 1 
 0 0 0 0 
1 1 1 1 1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    A 
   A B 
  A B C 
 A B C D 
A B C D E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    A 
   B B 
  C C C 
 D D D D 
E E E E E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    a 
   a b 
  a b c 
 a b c d 
a b c d e 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    a 
   b b 
  c c c 
 d d d d 
e e e e e 
\end{verbatim}
\newpage

\subsection{Inverted Right Half Pyramid Pattern II}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 
 1 2 3 4 
  1 2 3 
   1 2 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5 
 4 4 4 4 
  3 3 3 
   2 2 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1 
 1 0 1 0 
  1 0 1 
   1 0 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1 
 0 0 0 0 
  1 1 1 
   0 0 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E 
 A B C D 
  A B C 
   A B 
    A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E 
 D D D D 
  C C C 
   B B 
    A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e 
 a b c d 
  a b c 
   a b 
    a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Inverted Pyramid Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Inverted Pyramid Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e 
 d d d d 
  c c c 
   b b 
    a 
\end{verbatim}
\newpage


\subsection{Diamond Pattern II}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 
 1 2 3 4 
  1 2 3 
   1 2 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   2 2 
  3 3 3 
 4 4 4 4 
5 5 5 5 5 
 4 4 4 4 
  3 3 3 
   2 2 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   1 0 
  1 0 1 
 1 0 1 0 
1 0 1 0 1 
 1 0 1 0 
  1 0 1 
   1 0 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1 
   0 0 
  1 1 1 
 0 0 0 0 
1 1 1 1 1 
 0 0 0 0 
  1 1 1 
   0 0 
    1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    A 
   A B 
  A B C 
 A B C D 
A B C D E 
 A B C D 
  A B C 
   A B 
    A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    A 
   B B 
  C C C 
 D D D D 
E E E E E 
 D D D D 
  C C C 
   B B 
    A 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    a 
   a b 
  a b c 
 a b c d 
a b c d e 
 a b c d 
  a b c 
   a b 
    a 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Diamond Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Diamond Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    a 
   b b 
  c c c 
 d d d d 
e e e e e 
 d d d d 
  c c c 
   b b 
    a 
\end{verbatim}
\newpage

\subsection{Hourglass Pattern II}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 
 1 2 3 4 
  1 2 3 
   1 2 
    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
5 5 5 5 5 
 4 4 4 4 
  3 3 3 
   2 2 
    1 
   2 2 
  3 3 3 
 4 4 4 4 
5 5 5 5 5 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1 
 1 0 1 0 
  1 0 1 
   1 0 
    1 
   1 0 
  1 0 1 
 1 0 1 0 
1 0 1 0 1 
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1 
 0 0 0 0 
  1 1 1 
   0 0 
    1 
   0 0 
  1 1 1 
 0 0 0 0 
1 1 1 1 1 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E 
 A B C D 
  A B C 
   A B 
    A 
   A B 
  A B C 
 A B C D 
A B C D E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
E E E E E 
 D D D D 
  C C C 
   B B 
    A 
   B B 
  C C C 
 D D D D 
E E E E E 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e 
 a b c d 
  a b c 
   a b 
    a 
   a b 
  a b c 
 a b c d 
a b c d e 
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Hourglass Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Hourglass Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
e e e e e 
 d d d d 
  c c c 
   b b 
    a 
   b b 
  c c c 
 d d d d 
e e e e e 
\end{verbatim}
\newpage

\subsection{Square Pattern}

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Column Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Column Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << col << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
\end{verbatim}
\newpage

\subsubsection{Print Number \{1, 2, 3, ..., n\} - Row Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number \{1, 2, 3, ..., n\} - Row Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << row << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1
2 2 2 2 2
3 3 3 3 3
4 4 4 4 4
5 5 5 5 5
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Column Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Column Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << col % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 0 1 0 1
1 0 1 0 1
1 0 1 0 1
1 0 1 0 1
1 0 1 0 1
\end{verbatim}
\newpage

\subsubsection{Print Binary \{0, 1\} - Row Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Binary \{0, 1\} - Row Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << row % 2 << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 1 1 1 1
0 0 0 0 0
1 1 1 1 1
0 0 0 0 0
1 1 1 1 1
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Column Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Column Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << char(col + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A B C D E
A B C D E
A B C D E
A B C D E
A B C D E
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{A, B, C, ..., Z\} - Row Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{A, B, C, ..., Z\} - Row Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << char(row + 64) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
A A A A A
B B B B B
C C C C C
D D D D D
E E E E E
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Column Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Column Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << char(col + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a b c d e
a b c d e
a b c d e
a b c d e
a b c d e
\end{verbatim}
\newpage

\subsubsection{Print Alphabet \{a, b, c, ..., z\} - Row Square Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Alphabet \{a, b, c, ..., z\} - Row Square Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << char(row + 96) << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
a a a a a
b b b b b
c c c c c
d d d d d
e e e e e
\end{verbatim}
\newpage


\subsection{All Pyramid Pattern}

\subsubsection{Print Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
*
* *
* * *
* * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
* * * *
* * *
* *
*
\end{verbatim}
\newpage

\subsubsection{Print Mirror Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " *";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        *
      * *
    * * *
  * * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Mirror Inverted Right Angle Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Inverted Right Angle Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " *";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
  * * * *
    * * *
      * *
        *
\end{verbatim}
\newpage

\subsubsection{Print Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
*
* *
* * *
* * * *
* * * * *
* * * *
* * *
* *
*
\end{verbatim}
\newpage

\subsubsection{Print Mirror Arrow Shaped Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Arrow Shaped Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " *";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " *";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        *
      * *
    * * *
  * * * *
* * * * *
  * * * *
    * * *
      * *
        *
\end{verbatim}
\newpage

\subsubsection{Print Full Pyramid Pattern I}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Full Pyramid Pattern I}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        *
      * * *
    * * * * *
  * * * * * * *
* * * * * * * * *
\end{verbatim}
\newpage

\subsubsection{Print Inverted Full Pyramid Pattern I}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Full Pyramid Pattern I}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * * * * * *
  * * * * * * *
    * * * * *
      * * *
        *
\end{verbatim}
\newpage

\subsubsection{Print Full Pyramid Pattern II}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Full Pyramid Pattern II}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    *
   * *
  * * *
 * * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Inverted Full Pyramid Pattern II}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Full Pyramid Pattern II}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
 * * * *
  * * *
   * *
    *
\end{verbatim}
\newpage

\subsubsection{Print Pyramid \& Inverted Pyramid Pattern Or Diamond Pattern I}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Pyramid \& Inverted Pyramid Pattern Or Diamond Pattern I}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        *
      * * *
    * * * * *
  * * * * * * *
* * * * * * * * *
  * * * * * * *
    * * * * *
      * * *
        *
\end{verbatim}
\newpage

\subsubsection{Print Inverted Pyramid \& Pyramid Pattern Or Hourglass Pattern I}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Pyramid \& Pyramid Pattern Or Hourglass Pattern I}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= 2 * row - 1; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * * * * * *
  * * * * * * *
    * * * * *
      * * *
        *
      * * *
    * * * * *
  * * * * * * *
* * * * * * * * *
\end{verbatim}
\newpage

\subsubsection{Print Pyramid \& Inverted Pyramid Pattern Or Diamond Pattern II}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Pyramid \& Inverted Pyramid Pattern Or Diamond Pattern II}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    *
   * *
  * * *
 * * * *
* * * * *
 * * * *
  * * *
   * *
    *
\end{verbatim}
\newpage

\subsubsection{Print Inverted Pyramid \& Pyramid Pattern Or Hourglass Pattern II}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Pyramid \& Pyramid Pattern Or Hourglass Pattern II}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    for(row = 2; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
 * * * *
  * * *
   * *
    *
   * *
  * * *
 * * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Filled Square Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Filled Square Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
* * * * *
* * * * *
* * * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Hollow Square Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Hollow Square Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(row == 1 || row == n || col == 1 || col == n)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
*       *
*       *
*       *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Hollow Triangle Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Hollow Triangle Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(col == 1 || row == n || col == row)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
*
* *
*   *
*     *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print X Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print X Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(row == col || (row + col) == (n + 1))
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
*       *
  *   *
    *
  *   *
*       *
\end{verbatim}
\newpage

\subsubsection{Print Z Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Z Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(row == 1 || row == n || (col + row) == (n + 1))
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
      *
    *
  *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Mirror Z Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Z Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(row == 1 || row == n || col == row)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
  *
    *
      *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Right Diagonal Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Right Diagonal Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if((col + row) == (n + 1))
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        *
      *
    *
  *
*
\end{verbatim}
\newpage

\subsubsection{Print Left Diagonal Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Left Diagonal Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n; col++)
        {
            if(col == row)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
*
  *
    *
      *
        *
\end{verbatim}
\newpage

\subsubsection{Print Rhombus Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Rhombus Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= n; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    * * * * *
   * * * * *
  * * * * *
 * * * * *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Mirror Rhombus Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Rhombus Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= n; col++)
        {
            cout << "* ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
 * * * * *
  * * * * *
   * * * * *
    * * * * *
     * * * * *
\end{verbatim}
\newpage

\subsubsection{Print Hollow Rhombus Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Hollow Rhombus Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= n; col++)
        {
            if(col == 1 || col == n || row == 1 || row == n)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    * * * * *
   *       *
  *       *
 *       *
* * * * *
\end{verbatim}
\newpage

\subsubsection{Print Mirror Hollow Rhombus Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Mirror Hollow Rhombus Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col < row; col++)
        {
            cout << " ";
        }
        for(col = 1; col <= n; col++)
        {
            if(col == 1 || col == n || row == 1 || row == n)
                cout << "* ";
            else
                cout << "  ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
* * * * *
 *       *
  *       *
   *       *
    * * * * *
\end{verbatim}
\newpage

\subsection{Print Floyd's Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Floyd's Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col, count = 0;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= row; col++)
        {
            count++;
            cout << count << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=4:}
\begin{verbatim}
1
2 3
4 5 6
7 8 9 10
\end{verbatim}
\newpage

\subsection{Print Pascal’s Triangle Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Pascal’s Triangle Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col, value;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 0; row < n; row++)
    {
        for(col = 0; col < n - row - 1; col++)
        {
            cout << " ";
        }
        value = 1;
        for(col = 0; col <= row; col++)
        {
            cout << value << " ";
            value = value * (row - col) / (col + 1);
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1
\end{verbatim}
\newpage

\subsection{Print Number Pyramid Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number Pyramid Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        for(col = row - 1; col >= 1; col--)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 2 1
    1 2 3 2 1
  1 2 3 4 3 2 1
1 2 3 4 5 4 3 2 1
\end{verbatim}
\newpage

\subsection{Print Inverted Number Pyramid Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Inverted Number Pyramid Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = n; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        for(col = row - 1; col >= 1; col--)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
1 2 3 4 5 4 3 2 1
  1 2 3 4 3 2 1
    1 2 3 2 1
      1 2 1
        1
\end{verbatim}
\newpage

\subsection{Print Number Diamond Shape Pattern}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Number Diamond Shape Pattern}]
#include <iostream>
using namespace std;
int main()
{
    int n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> n;
    for(row = 1; row <= n; row++)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        for(col = row - 1; col >= 1; col--)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    for(row = n - 1; row >= 1; row--)
    {
        for(col = 1; col <= n - row; col++)
        {
            cout << "  ";
        }
        for(col = 1; col <= row; col++)
        {
            cout << " " << col;
        }
        for(col = row - 1; col >= 1; col--)
        {
            cout << " " << col;
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output for n=5:}
\begin{verbatim}
        1
      1 2 1
    1 2 3 2 1
  1 2 3 4 3 2 1
1 2 3 4 5 4 3 2 1
  1 2 3 4 3 2 1
    1 2 3 2 1
      1 2 1
        1
\end{verbatim}
\newpage



\section{Array Programming Exercises}

\subsection{Print \& Sum of Numbers Using Array (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print \& Sum of Numbers Using Array (Method 1)}]
#include <iostream>
using namespace std;
int main()
{
    int num[5], sum;
    num[0] = 80;
    num[1] = 65;
    num[2] = 75;
    num[3] = 82;
    num[4] = 45;
    cout << num[0] << endl;
    cout << num[1] << endl;
    cout << num[2] << endl;
    cout << num[3] << endl;
    cout << num[4] << endl;
    sum = num[0] + num[1] + num[2] + num[3] + num[4];
    cout << endl << "The Sum of Numbers are: " << sum;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
80
65
75
82
45

The Sum of Numbers are: 347
\end{verbatim}
\newpage

\subsection{Print \& Sum of Numbers Using Array (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print \& Sum of Numbers Using Array (Method 2)}]
#include <iostream>
using namespace std;
int main()
{
    int num[5] = {80, 65, 75, 82, 45}, sum, i;
    for(i = 0; i < 5; i++)
    {
        cout << num[i] << endl;
    }
    sum = num[0] + num[1] + num[2] + num[3] + num[4];
    cout << endl << "The Sum of Numbers are: " << sum;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
80
65
75
82
45

The Sum of Numbers are: 347
\end{verbatim}
\newpage

\subsection{Sum \& Average of Numbers Using Array (Method 1)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum \& Average of Numbers Using Array (Method 1)}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num[100], sum = 0, i, n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    cout << "Enter " << n << " Numbers: ";
    for(i = 0; i < n; i++)
    {
        cin >> num[i];
    }
    for(i = 0; i < n; i++)
    {
        sum = sum + num[i];
    }
    cout << endl << "The Sum is: " << sum;
    cout << fixed << setprecision(2);
    cout << endl << endl << "The Average is: " << (float)sum / n;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 5 Numbers: 10 20 30 40 50

The Sum is: 150

The Average is: 30.00
\end{verbatim}
\newpage

\subsection{Sum \& Average of Numbers Using Array (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum \& Average of Numbers Using Array (Method 2)}]
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    int num[100], sum = 0, i, n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for(i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> num[i];
    }
    for(i = 0; i < n; i++)
    {
        sum = sum + num[i];
    }
    cout << endl << "The Sum is: " << sum;
    cout << fixed << setprecision(2);
    cout << endl << endl << "The Average is: " << (float)sum / n;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 10
Enter 2 Element: 20
Enter 3 Element: 30
Enter 4 Element: 40
Enter 5 Element: 50

The Sum is: 150

The Average is: 30.00
\end{verbatim}
\newpage

\subsection{Maximum of Numbers Using Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Maximum of Numbers Using Array}]
#include <iostream>
using namespace std;
int main()
{
    int num[100], max, n, i;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for(i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> num[i];
    }
    max = num[0];
    for(i = 0; i < n; i++)
    {
        if(max < num[i])
            max = num[i];
    }
    cout << endl << "The Maximum Number is: " << max;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 10
Enter 2 Element: 50
Enter 3 Element: 30
Enter 4 Element: 40
Enter 5 Element: 20

The Maximum Number is: 50
\end{verbatim}
\newpage

\subsection{Minimum of Numbers Using Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Minimum of Numbers Using Array}]
#include <iostream>
using namespace std;
int main()
{
    int num[100], min, n, i;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for(i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Number: ";
        cin >> num[i];
    }
    min = num[0];
    for(i = 0; i < n; i++)
    {
        if(min > num[i])
            min = num[i];
    }
    cout << endl << "The Minimum Number is: " << min;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Number: 10
Enter 2 Number: 50
Enter 3 Number: 30
Enter 4 Number: 40
Enter 5 Number: 20

The Minimum Number is: 10
\end{verbatim}
\newpage

\subsection{Linear Search Number Using Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Linear Search Number Using Array}]
#include <iostream>
using namespace std;
int main()
{
    int num[6] = {10, 2, 15, 20, 35, 46}, n, i, pos = -1;
    cout << "Enter the Number You Want to Search: ";
    cin >> n;
    for(i = 0; i < 6; i++)
    {
        if(n == num[i])
        {
            pos = i + 1;
            break;
        }
    }
    if(pos == -1)
    {
        cout << endl << "The Number is not Found";
    }
    else
    {
        cout << endl << "The Number is at " << pos << " position";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Enter the Number You Want to Search: 15

The Number is at 3 position
\end{verbatim}
\newpage

\subsection{Binary Search Number Using Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Binary Search Number Using Array}]
#include <iostream>
using namespace std;
int binarySearch(int num[], int n, int key)
{
    int low = 0, high = n - 1;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (num[mid] == key)
            return mid;
        if (num[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int main()
{
    int num[100], key, n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> num[i];
    }
    cout << endl << "Enter Element to Search: ";
    cin >> key;
    int result = binarySearch(num, n, key);
    if (result == -1)
        cout << endl << "Element not Found";
    else
        cout << endl << "Element Found at " << result + 1 << " Position";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 1
Enter 2 Element: 3
Enter 3 Element: 5
Enter 4 Element: 7
Enter 5 Element: 9

Enter Element to Search: 5

Element Found at 3 Position
\end{verbatim}
\newpage

\subsection{Copy All Elements of an Array to Another Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Copy All Elements of an Array to Another Array}]
#include <iostream>
using namespace std;
int main()
{
    int array1[100], array2[100], n, i;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for(i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> array1[i];
    }
    cout << endl << "Array: ";
    for(i = 0; i < n; i++)
    {
        cout << array1[i] << " ";
    }
    for(i = 0; i < n; i++)
    {
        array2[i] = array1[i];
    }
    cout << endl << endl << "Copied Array: ";
    for(i = 0; i < n; i++)
    {
        cout << array2[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 10
Enter 2 Element: 20
Enter 3 Element: 30
Enter 4 Element: 40
Enter 5 Element: 50

Array: 10 20 30 40 50 

Copied Array: 10 20 30 40 50 
\end{verbatim}
\newpage

\subsection{Merge Two Arrays}
\begin{lstlisting}[caption={Merge Two Arrays}]
#include <iostream>
using namespace std;
int main()
{
    int n1, n2;
    cout << "Size of 1st Array: ";
    cin >> n1;
    cout << endl;
    int array1[100];
    if (n1 > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    for (int i = 0; i < n1; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> array1[i];
    }
    cout << endl << "Size of 2nd Array: ";
    cin >> n2;
    cout << endl;
    int array2[100];
    if (n2 > 100){
        cout << "Array size too large!" << endl;
        return 1;
    }
    for (int i = 0; i < n2; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> array2[i];
    }
    int merged[200];
    for (int i = 0; i < n1; i++)
    {
        merged[i] = array1[i];
    }
    for (int i = 0; i < n2; i++)
    {
        merged[n1 + i] = array2[i];
    }
    cout << endl << "Merged array: ";
    for (int i = 0; i < n1 + n2; i++)
    {
        cout << merged[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of 1st Array: 5                        Size of 2nd Array: 5

Enter 1 Element: 1                          Enter 1 Element: 6
Enter 2 Element: 2                          Enter 2 Element: 7
Enter 3 Element: 3                          Enter 3 Element: 8
Enter 4 Element: 4                          Enter 4 Element: 9
Enter 5 Element: 5                          Enter 5 Element: 10

Merged array: 1 2 3 4 5 6 7 8 9 10
\end{verbatim}
\newpage

\subsection{Sort an Array using Bubble Sort}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort an Array using Bubble Sort}]
#include <iostream>
using namespace std;
void bubbleSort(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
        for (int j = 0; j < size - i - 1; j++)
            if (arr[j] > arr[j + 1])
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    bubbleSort(arr, SIZE);
    cout << endl << "Sorted array: ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 5
Enter 2 Element: 2
Enter 3 Element: 8
Enter 4 Element: 1
Enter 5 Element: 9

Sorted array: 1 2 5 8 9
\end{verbatim}
\newpage

\subsection{Sort an Array using Merge Sort}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort an Array using Merge Sort}]
#include <iostream>
using namespace std;
void merge(int arr[], int left, int mid, int right)
{
    int n1 = mid - left + 1, n2 = right - mid;
    int L[100], R[100];
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2){
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }
    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right)
{
    if (left < right){
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++){
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    mergeSort(arr, 0, SIZE - 1);
    cout << endl << "Sorted array: ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\newpage

\subsection{Sort an Array Using Selection Sort}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort an Array Using Selection Sort}]
#include <iostream>
using namespace std;
void selectionSort(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        int min_idx = i;
        for (int j = i + 1; j < size; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    selectionSort(arr, SIZE);
    cout << endl << "Sorted array: ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 5
Enter 2 Element: 2
Enter 3 Element: 8
Enter 4 Element: 1
Enter 5 Element: 9

Sorted array: 1 2 5 8 9
\end{verbatim}
\newpage

\subsection{Sort an Array Using Insertion Sort}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort an Array Using Insertion Sort}]
#include <iostream>
using namespace std;
void insertionSort(int arr[], int size)
{
    for (int i = 1; i < size; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    insertionSort(arr, SIZE);
    cout << endl << "Sorted array: ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 5
Enter 2 Element: 2
Enter 3 Element: 8
Enter 4 Element: 1
Enter 5 Element: 9

Sorted array: 1 2 5 8 9
\end{verbatim}
\newpage

\subsection{Sort the Elements of an Array in Descending Order}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort the Elements of an Array in Descending Order}]
#include <iostream>
using namespace std;
void bubbleSortDesc(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
        for (int j = 0; j < size - i - 1; j++)
            if (arr[j] < arr[j + 1])
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    bubbleSortDesc(arr, SIZE);
    cout << endl << "Sorted array (descending): ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 5
Enter 2 Element: 2
Enter 3 Element: 8
Enter 4 Element: 1
Enter 5 Element: 9

Sorted array (descending): 9 8 5 2 1
\end{verbatim}
\newpage

\subsection{Sort the Elements of an Array in Ascending Order}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sort the Elements of an Array in Ascending Order}]
#include <iostream>
using namespace std;
void bubbleSortAsc(int arr[], int size)
{
    for (int i = 0; i < size - 1; i++)
        for (int j = 0; j < size - i - 1; j++)
            if (arr[j] > arr[j + 1])
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}

int main()
{
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    bubbleSortAsc(arr, SIZE);
    cout << endl << "Sorted array (ascending): ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 5
Enter 2 Element: 2
Enter 3 Element: 8
Enter 4 Element: 1
Enter 5 Element: 9

Sorted array (ascending): 1 2 5 8 9
\end{verbatim}
\newpage

\subsection{Remove Duplicate Elements From a Sorted Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Remove Duplicate Elements From a Sorted Array}]
#include <iostream>
using namespace std;
int removeDuplicates(int arr[], int size){
    if (size == 0) return 0;
    int newSize = 1;
    for (int i = 1; i < size; i++){
        if (arr[i] != arr[newSize - 1]){
            arr[newSize++] = arr[i];
        }
    }
    return newSize;
}

int main(){
    int SIZE;
    cout << "Size of Array: ";
    cin >> SIZE;
    if (SIZE > 100){
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++){
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    for (int i = 0; i < SIZE - 1; i++){
        for (int j = 0; j < SIZE - i - 1; j++){
            if (arr[j] > arr[j + 1]){
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    int newSize = removeDuplicates(arr, SIZE);
    cout << "Array After Removing Duplicates: ";
    for (int i = 0; i < newSize; i++){
        cout << arr[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 7

Enter 1 Element: 1
Enter 2 Element: 1
Enter 3 Element: 2
Enter 4 Element: 3
Enter 5 Element: 3
Enter 6 Element: 4
Enter 7 Element: 4

Array After Removing Duplicates: 1 2 3 4
\end{verbatim}
\newpage

\subsection{Insert an Element in an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Insert an Element in an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n, pos, element;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n >= 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << "\nEnter Position and Element to Insert: ";
    cin >> pos >> element;
    if (pos < 0 || pos > n)
    {
        cout << "Invalid position\n";
        return 1;
    }
    for (int i = n; i > pos; i--)
        arr[i] = arr[i - 1];
    arr[pos] = element;
    n++;
    cout << endl << "Array After Insertion: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 3
Enter 4 Element: 4
Enter 5 Element: 5

Enter Position and Element to Insert: 2 10

Array After Insertion: 1 2 10 3 4 5
\end{verbatim}
\newpage

\subsection{Delete an Element from an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Delete an Element from an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n, pos;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << "\nEnter position to delete: ";
    cin >> pos;
    if (pos < 0 || pos >= n)
    {
        cout << "Invalid position\n";
        return 1;
    }
    for (int i = pos; i < n - 1; i++)
        arr[i] = arr[i + 1];
    n--;
    cout << endl << "Array after deletion: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 3
Enter 4 Element: 4
Enter 5 Element: 5

Enter position to delete: 2

Array after deletion: 1 2 4 5
\end{verbatim}
\newpage

\subsection{Reverse an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Reverse an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    for (int i = 0, j = n - 1; i < j; i++, j--)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    cout << endl << "Reversed array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 3
Enter 4 Element: 4
Enter 5 Element: 5

Reversed array: 5 4 3 2 1
\end{verbatim}
\newpage

\subsection{Second Largest Element in Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Second Largest Element in Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n < 2)
    {
        cout << "Array too small\n";
        return 1;
    }
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    int max = arr[0], secondMax = arr[1];
    if (secondMax > max)
    {
        int temp = max;
        max = secondMax;
        secondMax = temp;
    }
    for (int i = 2; i < n; i++)
    {
        if (arr[i] > max)
        {
            secondMax = max;
            max = arr[i];
        }
        else if (arr[i] > secondMax && arr[i] != max)
        {
            secondMax = arr[i];
        }
    }
    cout << endl << "Second largest: " << secondMax;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 3
Enter 2 Element: 7
Enter 3 Element: 1
Enter 4 Element: 9
Enter 5 Element: 4

Second largest: 7
\end{verbatim}
\newpage

\subsection{Print Unique Elements of an Unsorted Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Unique Elements of an Unsorted Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << endl << "Unique Elements: ";
    for (int i = 0; i < n; i++)
    {
        int isUnique = 1;
        for (int j = 0; j < i; j++)
            if (arr[i] == arr[j])
            {
                isUnique = 0;
                break;
            }
        if (isUnique)
            cout << arr[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 6

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 2
Enter 4 Element: 3
Enter 5 Element: 3
Enter 6 Element: 4

Unique Elements: 1 2 3 4
\end{verbatim}
\newpage

\subsection{Print All Negative Numbers of an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print All Negative Numbers of an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << endl << "Negative numbers: ";
    for (int i = 0; i < n; i++)
        if (arr[i] < 0)
            cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: -1
Enter 2 Element: 2
Enter 3 Element: -3
Enter 4 Element: 4
Enter 5 Element: -5

Negative numbers: -1 -3 -5
\end{verbatim}
\newpage

\subsection{Count All Negative Numbers in an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count All Negative Numbers in an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n, count = 0;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    for (int i = 0; i < n; i++)
    {
        if (arr[i] < 0)
            count++;
    }
    cout << endl << "Count of Negative Numbers: " << count;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: -1
Enter 2 Element: 2
Enter 3 Element: -3
Enter 4 Element: 4
Enter 5 Element: -5

Count of Negative Numbers: 3
\end{verbatim}
\newpage

\subsection{Print All Positive Numbers of an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print All Positive Numbers of an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << endl << "Positive Numbers: ";
    for (int i = 0; i < n; i++)
        if (arr[i] > 0)
            cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: -1
Enter 2 Element: 2
Enter 3 Element: -3
Enter 4 Element: 4
Enter 5 Element: -5

Potove Numbers: 2 4
\end{verbatim}
\newpage

\subsection{Count All Negative Numbers in an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count All Negative Numbers in an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n, count = 0;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    for (int i = 0; i < n; i++)
    {
        if (arr[i] > 0)
            count++;
    }
    cout << endl << "Count of Positive Numbers: " << count;
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: -1
Enter 2 Element: 2
Enter 3 Element: -3
Enter 4 Element: 4
Enter 5 Element: -5

Count of Positive Numbers: 2
\end{verbatim}
\newpage

\subsection{Find Count of Each Element of an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Count of Each Element of an Array}]
#include <iostream>
using namespace std;
int main()
{
    int n;
    cout << "Size of Array: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100], freq[100] = {0};
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    for (int i = 0; i < n; i++)
    {
        if (freq[i] == -1)
            continue;
        int count = 1;
        for (int j = i + 1; j < n; j++)
            if (arr[i] == arr[j])
            {
                count++;
                freq[j] = -1;
            }
        cout << endl << "Element " << arr[i] << ": " << count << " times";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 6

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 2
Enter 4 Element: 3
Enter 5 Element: 3
Enter 6 Element: 4

Element 1: 1 times
Element 2: 2 times
Element 3: 2 times
Element 4: 1 times
\end{verbatim}
\newpage

\subsection{Remove All Occurrences of an Element in an Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Remove All Occurrences of an Element in an Array}]
#include <iostream>
using namespace std;
int removeElement(int arr[], int size, int key)
{
    int newSize = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] != key)
        {
            arr[newSize++] = arr[i];
        }
    }
    return newSize;
}

int main()
{
    int SIZE, key;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << endl << "Enter Element to Remove: ";
    cin >> key;
    int newSize = removeElement(arr, SIZE, key);
    cout << endl << "Array after removal: ";
    for (int i = 0; i < newSize; i++)
    {
        cout << arr[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 6

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 3
Enter 4 Element: 2
Enter 5 Element: 4
Enter 6 Element: 2

Enter Element to Remove: 2

Array after removal: 1 3 4
\end{verbatim}
\newpage

\subsection{Find Common Array Elements}
\vspace{0.5cm}
\begin{lstlisting}[caption={Find Common Array Elements}]
#include <iostream>
using namespace std;
int main()
{
    int SIZE;
    cout << "Size of 1st Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100){
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr1[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr1[i];
    }
    cout << endl;
    cout << "Size of 2nd Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100){
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr2[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr2[i];
    }
    cout << endl << "Common Elements: ";
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            if (arr1[i] == arr2[j]){
                cout << arr1[i] << " ";
                break;
            }
        }
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of 1st Array: 5                        Size of 2nd Array: 5

Enter 1 Element: 1                          Enter 1 Element: 2
Enter 2 Element: 2                          Enter 2 Element: 4
Enter 3 Element: 3                          Enter 3 Element: 6
Enter 4 Element: 4                          Enter 4 Element: 8
Enter 5 Element: 5                          Enter 5 Element: 10

Common Elements: 2 4
\end{verbatim}
\newpage

\subsection{Array Rotation}
\vspace{0.5cm}
\begin{lstlisting}[caption={Array Rotation}]
#include <iostream>
using namespace std;
void rotateArray(int arr[], int size, int d)
{
    int temp[100];
    for (int i = 0; i < size; i++)
        temp[i] = arr[(i + d) % size];
    for (int i = 0; i < size; i++)
        arr[i] = temp[i];
}

int main()
{
    int SIZE, d;
    cout << "Size of Array: ";
    cin >> SIZE;
    cout << endl;
    if (SIZE > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    int arr[100];
    for (int i = 0; i < SIZE; i++)
    {
        cout << "Enter " << i + 1 << " Element: ";
        cin >> arr[i];
    }
    cout << endl << "Enter Number of Rotations: ";
    cin >> d;
    d = d % SIZE;
    rotateArray(arr, SIZE, d);
    cout << endl << "Rotated array: ";
    for (int i = 0; i < SIZE; i++)
        cout << arr[i] << " ";
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Size of Array: 5

Enter 1 Element: 1
Enter 2 Element: 2
Enter 3 Element: 3
Enter 4 Element: 4
Enter 5 Element: 5

Enter Number of Rotations: 2

Rotated array: 3 4 5 1 2
\end{verbatim}
\newpage

\subsection{Fibonacci Series Using Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Fibonacci Series Using Array}]
#include <iostream>
using namespace std;
int main()
{
    int num[100], n, i;
    cout << "Number of Series: ";
    cin >> n;
    cout << endl;
    if (n > 100)
    {
        cout << "Array size too large!" << endl;
        return 1;
    }
    num[0] = 0;
    num[1] = 1;
    for(i = 2; i < n; i++)
    {
        num[i] = num[i - 1] + num[i - 2];
    }
    for(i = 0; i < n; i++)
    {
        cout << num[i] << " ";
    }
    return 0;
}
\end{lstlisting}
\textbf{Output:}
\begin{verbatim}
Number of Series: 5

0 1 1 2 3 
\end{verbatim}
\newpage

\section{Matrix Programming Exercises}

\subsection{Print Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main()
{
    int A[100][100], m, n, row, col;
    cout << "Enter the Number of Rows: ";
    cin >> m;
    cout << "Enter the Number of Columns: ";
    cin >> n;
    cout << endl;
    for(row = 0; row < m; row++)
    {
        cout << "Enter " << row + 1 << " Rows Elements:" << endl;
        for(col = 0; col < n; col++)
        {
            cout << "A[" << row << "][" << col << "] : ";
            cin >> A[row][col];
        }
        cout << endl;
    }
    cout << "The Matrix is:" << endl;
    for(row = 0; row < m; row++)
    {
        for(col = 0; col < n; col++)
        {
            cout << A[row][col] << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input m=2, n=3, elements=1,2,3,4,5,6):}
\begin{verbatim}
The Matrix is:
1 2 3 
4 5 6 
\end{verbatim}
\newpage

\subsection{Print 2 Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print 2 Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main(){
    int A[100][100], B[100][100], m1, n1, m2, n2, row1, col1, row2, col2;
    cout << "Enter Rows Number in A Matrix: ";
    cin >> m1;
    cout << "Enter Columns Number in A Matrix: ";
    cin >> n1;
    cout << endl << "Enter Elements of A Matrix:" << endl;
    for(row1 = 0; row1 < m1; row1++){
        for(col1 = 0; col1 < n1; col1++){
            cout << "A[" << row1 << "][" << col1 << "] = ";
            cin >> A[row1][col1];
        }
        cout << endl;
    }
    cout << "Enter Rows Number in B Matrix: ";
    cin >> m2;
    cout << "Enter Columns Number in B Matrix: ";
    cin >> n2;
    cout << endl << "Enter Elements of B Matrix:" << endl;
    for(row2 = 0; row2 < m2; row2++){
        for(col2 = 0; col2 < n2; col2++){
            cout << "B[" << row2 << "][" << col2 << "] = ";
            cin >> B[row2][col2];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row1 = 0; row1 < m1; row1++){
        cout << "\t";
        for(col1 = 0; col1 < n1; col1++){
            cout << A[row1][col1] << " ";
        }
        cout << endl;
    }
    cout << endl << "B: ";
    for(row2 = 0; row2 < m2; row2++){
        cout << "\t";
        for(col2 = 0; col2 < n2; col2++){
            cout << B[row2][col2] << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}
\newpage

\subsection{Print Addition of 2 Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Addition of 2 Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main(){
    int A[100][100], B[100][100], C[100][100], m, n, row, col;
    cout << "Enter Rows Number in A & B Matrix: ";
    cin >> m;
    cout << "Enter Columns Number in A & B Matrix: ";
    cin >> n;
    cout << endl << "Enter Elements of A Matrix:" << endl;
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            cout << "A[" << row << "][" << col << "] = ";
            cin >> A[row][col];
        }
        cout << endl;
    }
    cout << "Enter Elements of B Matrix:" << endl;
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            cout << "B[" << row << "][" << col << "] = ";
            cin >> B[row][col];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row = 0; row < m; row++){
        cout << "\t";
        for(col = 0; col < n; col++){
            cout << A[row][col] << " ";
        }
        cout << endl;
    }
    cout << endl << "B: ";
    for(row = 0; row < m; row++){
        cout << "\t";
        for(col = 0; col < n; col++){
            cout << B[row][col] << " ";
        }
        cout << endl;
    }
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            C[row][col] = A[row][col] + B[row][col];
        }
    }
    cout << endl << "The Addition of A & B is C." << endl;
    cout << "C: ";
    for(row = 0; row < m; row++){
        cout << "\t";
        for(col = 0; col < n; col++){
            cout << C[row][col] << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}
\newpage

\subsection{Print Subtraction of 2 Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Subtraction of 2 Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main(){
    int A[100][100], B[100][100], C[100][100], m, n, row, col;
    cout << "Enter Rows Number in A & B Matrix: ";
    cin >> m;
    cout << "Enter Columns Number in A & B Matrix: ";
    cin >> n;
    cout << endl << "Enter Elements of A Matrix:" << endl;
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            cout << "A[" << row << "][" << col << "] = ";
            cin >> A[row][col];
        }
        cout << endl;
    }
    cout << "Enter Elements of B Matrix:" << endl;
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            cout << "B[" << row << "][" << col << "] = ";
            cin >> B[row][col];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row = 0; row < m; row++)
    {
        cout << "\t";
        for(col = 0; col < n; col++)
        {
            cout << A[row][col] << " ";
        }
        cout << endl;
    }
    cout << endl << "B: ";
    for(row = 0; row < m; row++){
        cout << "\t";
        for(col = 0; col < n; col++){
            cout << B[row][col] << " ";
        }
        cout << endl;
    }
    for(row = 0; row < m; row++){
        for(col = 0; col < n; col++){
            C[row][col] = A[row][col] - B[row][col];
        }
    }
    cout << endl << "The Subtraction of A & B is C." << endl;
    cout << "C: ";
    for(row = 0; row < m; row++){
        cout << "\t";
        for(col = 0; col < n; col++){
            cout << C[row][col] << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}
\newpage

\subsection{Print Multiplication of 2 Matrix Using 2D Array}
\begin{lstlisting}[caption={Print Multiplication of 2 Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main(){
    int A[100][100], B[100][100], C[100][100], m1, n1, m2, n2, k, row1, col1, row2, col2, row3, col3, sum = 0;
    cout << "Enter Rows & Columns Number in A Matrix: ";
    cin >> m1 >> n1;
    cout << "Enter Rows & Columns Number in B Matrix: ";
    cin >> m2 >> n2;
    while(n1 != m2){
        cout << "Enter Rows & Columns Number in A Matrix: ";
        cin >> m1 >> n1;
        cout << "Enter Rows & Columns Number in B Matrix: ";
        cin >> m2 >> n2;
    }
    cout << endl << "Enter the Elements of A Matrix:" << endl;
    for(row1 = 0; row1 < m1; row1++){
        for(col1 = 0; col1 < n1; col1++){
            cout << "A[" << row1 << "][" << col1 << "] = ";
            cin >> A[row1][col1];
        } cout << endl;
    }
    cout << "Enter the Elements of B Matrix:" << endl;
    for(row2 = 0; row2 < m2; row2++){
        for(col2 = 0; col2 < n2; col2++){
            cout << "B[" << row2 << "][" << col2 << "] = ";
            cin >> B[row2][col2];
        } cout << endl;
    } cout << endl << "A: ";
    for(row1 = 0; row1 < m1; row1++){
        cout << "\t";
        for(col1 = 0; col1 < n1; col1++){
            cout << A[row1][col1] << " ";
        } cout << endl;
    } cout << endl << "B: ";
    for(row2 = 0; row2 < m2; row2++){
        cout << "\t";
        for(col2 = 0; col2 < n2; col2++){
            cout << B[row2][col2] << " ";
        } cout << endl;
    }
    for(row3 = 0; row3 < m1; row3++){
        for(col3 = 0; col3 < n2; col3++){
            for(k = 0; k < n1; k++){
                sum = sum + A[row3][k] * B[k][col3];
            }
            C[row3][col3] = sum;
            sum = 0;
        }
    }
    cout << endl << "The Multiplication of A & B is C." << endl << "C: ";
    for(row3 = 0; row3 < m1; row3++){
        cout << "\t";
        for(col3 = 0; col3 < n2; col3++){
            cout << C[row3][col3] << " ";
        } cout << endl;
    }
    return 0;
}
\end{lstlisting}
\newpage

\subsection{Print Transpose Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Transpose Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main()
{
    int A[100][100], B[100][100], m, n, row1, col1, row2, col2;
    cout << "Enter Rows Number in A Matrix: ";
    cin >> m;
    cout << "Enter Columns Number in A Matrix: ";
    cin >> n;
    cout << endl << "Enter the Elements of A Matrix:" << endl;
    for(row1 = 0; row1 < m; row1++)
    {
        for(col1 = 0; col1 < n; col1++)
        {
            cout << "A[" << row1 << "][" << col1 << "] = ";
            cin >> A[row1][col1];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row1 = 0; row1 < m; row1++)
    {
        cout << "\t";
        for(col1 = 0; col1 < n; col1++)
        {
            cout << A[row1][col1] << " ";
        }
        cout << endl;
    }
    for(row2 = 0; row2 < m; row2++)
    {
        for(col2 = 0; col2 < n; col2++)
        {
            B[col2][row2] = A[row2][col2];
        }
    }
    cout << endl << "Transpose Matrix is B." << endl;
    cout << "B: ";
    for(row2 = 0; row2 < n; row2++)
    {
        cout << "\t";
        for(col2 = 0; col2 < m; col2++)
        {
            cout << B[row2][col2] << " ";
        }
        cout << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input m=2, n=3, elements A=1,2,3,4,5,6):}
\begin{verbatim}
A: 	1 2 3 
    4 5 6 

Transpose Matrix is B.
B: 	1 4 
    2 5 
    3 6 
\end{verbatim}
\newpage

\subsection{Print \& Sum of Diagonal Elements of a Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print \& Sum of Diagonal Elements of a Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main()
{
    int A[100][100], m, n, row, col, sum = 0;
    cout << "Enter Rows Number in A Matrix: ";
    cin >> m;
    cout << "Enter Columns Number in A Matrix: ";
    cin >> n;
    cout << endl << "Enter the Elements of A Matrix:" << endl;
    for(row = 0; row < m; row++)
    {
        for(col = 0; col < n; col++)
        {
            cout << "A[" << row << "][" << col << "] = ";
            cin >> A[row][col];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row = 0; row < m; row++)
    {
        cout << "\t";
        for(col = 0; col < n; col++)
        {
            cout << A[row][col] << " ";
        }
        cout << endl;
    }
    cout << endl << "The Diagonal Elements are: ";
    for(row = 0; row < m; row++)
    {
        for(col = 0; col < n; col++)
        {
            if(row == col)
            {
                cout << A[row][col] << " ";
                sum = sum + A[row][col];
            }
        }
    }
    cout << endl << endl << "Sum of Diagonal Elements: " << sum;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input m=3, n=3, elements A=1,2,3,4,5,6,7,8,9):}
\begin{verbatim}
A: 	1 2 3 
    4 5 6 
    7 8 9 

The Diagonal Elements are: 1 5 9 

Sum of Diagonal Elements: 15
\end{verbatim}
\newpage

\subsection{Sum of Upper \& Lower Triangle Elements of a Matrix Using 2D Array}
\vspace{0.5cm}
\begin{lstlisting}[caption={Sum of Upper \& Lower Triangle Elements of a Matrix Using 2D Array}]
#include <iostream>
using namespace std;
int main()
{
    int A[100][100], m, n, row, col, upper = 0, lower = 0;
    cout << "Enter Rows Number in A Matrix: ";
    cin >> m;
    cout << "Enter Columns Number in A Matrix: ";
    cin >> n;
    cout << endl << "Enter the Elements of A Matrix:" << endl;
    for(row = 0; row < m; row++)
    {
        for(col = 0; col < n; col++)
        {
            cout << "A[" << row << "][" << col << "] = ";
            cin >> A[row][col];
        }
        cout << endl;
    }
    cout << "A: ";
    for(row = 0; row < m; row++)
    {
        cout << "\t";
        for(col = 0; col < n; col++)
        {
            cout << A[row][col] << " ";
        }
        cout << endl;
    }
    for(row = 0; row < m; row++)
    {
        for(col = 0; col < n; col++)
        {
            if(row < col)
            {
                upper = upper + A[row][col];
            }
            if(row > col)
            {
                lower = lower + A[row][col];
            }
        }
    }
    cout << endl << "Sum of Upper Elements of A Matrix is: " << upper;
    cout << endl << endl << "Sum of Lower Elements of A Matrix is: " << lower;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input m=3, n=3, elements A=1,2,3,4,5,6,7,8,9):}
\begin{verbatim}
A: 	1 2 3 
    4 5 6 
    7 8 9 

Sum of Upper Elements of A Matrix is: 11

Sum of Lower Elements of A Matrix is: 19
\end{verbatim}
\newpage

\section{String Programming Exercises}

\subsection{Print String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print String}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name = "Mejbahul";
    cout << "Name: " << Name;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Name: Mejbahul
\end{verbatim}
\newpage

\subsection{Print String (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print String (Method 2)}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name = "Mejbahul";
    cout << "Name: " << Name;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Name: Mejbahul
\end{verbatim}
\newpage

\subsection{Print Input String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Input String}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name;
    cout << "Enter Your Name: ";
    getline(cin, Name);
    cout << "Name: " << Name;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input "Mejbahul Alam"):}
\begin{verbatim}
Enter Your Name: Mejbahul Alam
Name: Mejbahul Alam
\end{verbatim}
\newpage

\subsection{Print Character Wise Using String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Character Wise Using String}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name = "Mejbahul Alam";
    int i = 0;
    while(Name[i] != '\0')
    {
        cout << Name[i] << endl;
        i++;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
M
e
j
b
a
h
u
l

A
l
a
m
\end{verbatim}
\newpage

\subsection{String Length Operations}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Length of a String}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name = "Mejbahul Alam";
    int len = Name.length();
    cout << "Length of the String is: " << len;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Length of the String is: 13
\end{verbatim}
\newpage

\subsection{Print Length of a String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Print Length of a String (Manual)}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string Name = "Mejbahul Alam";
    int i = 0, len = 0;
    while(Name[i] != '\0')
    {
        i++;
        len++;
    }
    cout << "Length of the String is: " << len;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Length of the String is: 13
\end{verbatim}
\newpage

\subsection{String Copy Operations}
\vspace{0.5cm}
\begin{lstlisting}[caption={Copy a String}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    string B;
    B = A;
    cout << "A is: " << A << endl;
    cout << "B is: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
A is: Mejbahul Alam
B is: Mejbahul Alam
\end{verbatim}
\newpage

\subsection{String Concatenation}
\vspace{0.5cm}
\begin{lstlisting}[caption={Concatenate Strings}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "My name is ";
    string B = "Mejbahul Alam";
    A += B;
    cout << "String 1: " << A << endl;
    cout << "String 2: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
String 1: My name is Mejbahul Alam
String 2: Mejbahul Alam
\end{verbatim}
\newpage

\subsection{Concatenation Using strcat() in String (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Concatenate Strings (Method 2)}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "My name is ";
    string B = "Mejbahul Alam";
    A += B;
    cout << "String 1: " << A << endl;
    cout << "String 2: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
String 1: My name is Mejbahul Alam
String 2: Mejbahul Alam
\end{verbatim}
\newpage

\subsection{Concatenation Without strcat() in String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Concatenate Strings Manually}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "My Name is ";
    string B = "Mejbahul Alam";
    A += B;
    cout << "The String is: " << A << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The String is: My Name is Mejbahul Alam
\end{verbatim}
\newpage

\subsection{String Comparison}
\vspace{0.5cm}
\begin{lstlisting}[caption={Compare Strings}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    string B = "Mejbahul";
    if(A == B)
    {
        cout << "The Strings are Equal";
    }
    else
    {
        cout << "The Strings are not Equal";
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Strings are not Equal
\end{verbatim}
\newpage

\subsection{String Reversal}
\vspace{0.5cm}
\begin{lstlisting}[caption={Reverse a String}]
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    cout << "A String is: " << A << endl;
    string B = A;
    reverse(B.begin(), B.end());
    cout << "B String is: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
A String is: Mejbahul Alam
B String is: malA luhabjeM
\end{verbatim}
\newpage

\subsection{Reverse Without strrev() in String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Reverse a String Manually}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    string B;
    int i = 0, len = 0, j = 0;
    while(A[i] != '\0')
    {
        i++;
        len++;
    }
    B.resize(len);
    for(i = len - 1; i >= 0; i--, j++)
    {
        B[j] = A[i];
    }
    cout << "A String is: " << A << endl;
    cout << "B String is: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
A String is: Mejbahul Alam
B String is: malA luhabjeM
\end{verbatim}
\newpage

\subsection{Palindrome Check}
\vspace{0.5cm}
\begin{lstlisting}[caption={Palindrome Check}]
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
int main()
{
    string A = "MADAM";
    string B = A;
    reverse(B.begin(), B.end());
    cout << "A String is: " << A << endl;
    cout << "B String is: " << B << endl;
    if(A == B)
        cout << "String is Palindrome";
    else
        cout << "String is not Palindrome";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
A String is: MADAM
B String is: MADAM
String is Palindrome
\end{verbatim}
\newpage

\subsection{String Swapping}
\vspace{0.5cm}
\begin{lstlisting}[caption={Swap Strings}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    string B = "Fatihul Alam";
    string temp;
    cout << "Before Swapping:" << endl;
    cout << "A String is: " << A << endl;
    cout << "B String is: " << B << endl;
    temp = A;
    A = B;
    B = temp;
    cout << endl << "After Swapping:" << endl;
    cout << "A String is: " << A << endl;
    cout << "B String is: " << B << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Swapping:
A String is: Mejbahul Alam
B String is: Fatihul Alam

After Swapping:
A String is: Fatihul Alam
B String is: Mejbahul Alam
\end{verbatim}
\newpage

\subsection{String Case Conversion}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert to Uppercase}]
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    transform(A.begin(), A.end(), A.begin(), ::toupper);
    cout << "Uppercase of A is: " << A;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Uppercase of A is: MEJBAHUL ALAM
\end{verbatim}
\newpage

\subsection{Lowercase Using strlwr() in String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Convert to Lowercase}]
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
using namespace std;
int main()
{
    string A = "Mejbahul Alam";
    transform(A.begin(), A.end(), A.begin(), ::tolower);
    cout << "Lowercase of A is: " << A;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Lowercase of A is: mejbahul alam
\end{verbatim}
\newpage

\subsection{String Character Counting}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Vowels, Consonants, Digits, Words, Others}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A;
    char ch;
    int i, vow, con, dig, word, oth;
    cout << "Enter a String: ";
    getline(cin, A);
    i = vow = con = dig = word = oth = 0;
    while((ch = A[i]) != '\0')
    {
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
           ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')
            vow++;
        else if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
            con++;
        else if(ch >= '0' && ch <= '9')
            dig++;
        else if(ch == ' ')
            word++;
        else
            oth++;
        i++;
    }
    word++;
    cout << "Number of Vowels: " << vow << endl;
    cout << "Number of Consonants: " << con << endl;
    cout << "Number of Digits: " << dig << endl;
    cout << "Number of Words: " << word << endl;
    cout << "Number of Others: " << oth << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input "Mejbahul Alam 123!"):}
\begin{verbatim}
Enter a String: Mejbahul Alam 123!
Number of Vowels: 5
Number of Consonants: 8
Number of Digits: 3
Number of Words: 3
Number of Others: 1
\end{verbatim}
\newpage

\subsection{Capital Letters, Small Letters \& Digits in String}
\vspace{0.5cm}
\begin{lstlisting}[caption={Count Capital Letters, Small Letters, Digits}]
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string A;
    char ch;
    int i, capital, small, digit;
    cout << "Enter a String: ";
    getline(cin, A);
    i = capital = small = digit = 0;
    while((ch = A[i]) != '\0')
    {
        if(A[i] >= 65 && A[i] <= 90)
            capital++;
        else if(A[i] >= 97 && A[i] <= 122)
            small++;
        else if(A[i] >= 48 && A[i] <= 57)
            digit++;
        i++;
    }
    cout << "Number of Capital Letters: " << capital << endl;
    cout << "Number of Small Letters: " << small << endl;
    cout << "Number of Digits: " << digit << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input "Mejbahul Alam 123"):}
\begin{verbatim}
Enter a String: Mejbahul Alam 123
Number of Capital Letters: 2
Number of Small Letters: 11
Number of Digits: 3
\end{verbatim}
\newpage

\section{Function Programming Exercises}

\subsection{Addition Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Addition Using Function}]
#include <iostream>
using namespace std;
int sum(int a, int b)
{
    return a + b;
}

int main()
{
    int num1, num2;
    cout << "Enter First Number: ";
    cin >> num1;
    cout << "Enter Second Number: ";
    cin >> num2;
    cout << endl << "The Addition is: " << sum(num1, num2) << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input num1=5, num2=6):}
\begin{verbatim}
Enter First Number: 5
Enter Second Number: 6

The Addition is: 11
\end{verbatim}
\newpage

\subsection{Addition Using Function (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Addition Using Function (Method 2)}]
#include <iostream>
using namespace std;
int sum(int a, int b)
{
    return a + b;
}

int main()
{
    int num1, num2;
    cout << "Enter First Number: ";
    cin >> num1;
    cout << "Enter Second Number: ";
    cin >> num2;
    int result = sum(num1, num2);
    cout << endl << "The Addition is: " << result << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input num1=5, num2=6):}
\begin{verbatim}
Enter First Number: 5
Enter Second Number: 6

The Addition is: 11
\end{verbatim}
\newpage

\subsection{Addition Using Function (Method 3)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Addition Using Function (Method 3)}]
#include <iostream>
using namespace std;
int sum(int a, int b)
{
    return a + b;
}

int main()
{
    int result = sum(5, 6);
    cout << "The Addition is: " << result << endl;
    result = sum(6, 7);
    cout << "The Addition is: " << result << endl;
    cout << endl << "The Addition is: " << sum(5, 6) << endl;
    cout << "The Addition is: " << sum(6, 7) << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Addition is: 11
The Addition is: 13

The Addition is: 11
The Addition is: 13
\end{verbatim}
\newpage

\subsection{Addition Using Function (Method 4)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Addition Using Function (Method 4)}]
#include <iostream>
using namespace std;
void sum(int a, int b, int c)
{
    cout << "The Addition is: " << a + b + c << endl;
}

int main()
{
    sum(5, 6, 7);
    sum(10, 20, 30);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Addition is: 18
The Addition is: 60
\end{verbatim}
\newpage

\subsection{Subtraction Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Subtraction Using Function}]
#include <iostream>
using namespace std;
void sum(int a, int b)
{
    cout << "The Addition is: " << a - b << endl;
}

int main()
{
    sum(5, 6);
    sum(10, 20);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Addition is: -1
The Addition is: -10
\end{verbatim}
\newpage

\subsection{Square of a Number Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Square of a Number Using Function}]
#include <iostream>
using namespace std;
int square(int a)
{
    return a * a;
}

int main()
{
    int num;
    cout << "Enter any Integer Number: ";
    cin >> num;
    int result = square(num);
    cout << "The Square is: " << result << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input num=5):}
\begin{verbatim}
Enter any Integer Number: 5
The Square is: 25
\end{verbatim}
\newpage

\subsection{Area of a Triangle Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Area of a Triangle Using Function}]
#include <iostream>
using namespace std;
double triangle(double b, double h)
{
    return 0.5 * b * h;
}

int main()
{
    double base, hight;
    cout << "Enter the Value of Base: ";
    cin >> base;
    cout << "Enter the Value of Hight: ";
    cin >> hight;
    double area = triangle(base, hight);
    cout << fixed;
    cout.precision(2);
    cout << "The Area of Triangle is: " << area << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input base=4, hight=3):}
\begin{verbatim}
Enter the Value of Base: 4
Enter the Value of Hight: 3
The Area of Triangle is: 6.00
\end{verbatim}
\newpage

\subsection{X^y Using User Defined Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={X^y Using User Defined Function}]
#include <iostream>
using namespace std;
void power(double b, double e)
{
    double i, result = 1;
    for(i = 1; i <= e; i++)
    {
        result = result * b;
    }
    cout << fixed;
    cout.precision(2);
    cout << b << " to the Power " << e << " is: " << result << endl;
}

int main()
{
    double base, exp;
    cout << "Enter the Value of Base: ";
    cin >> base;
    cout << "Enter the Value of Exponent: ";
    cin >> exp;
    power(base, exp);
    return 0;
}
\end{lstlisting}

\textbf{Output (for input base=2, exp=3):}
\begin{verbatim}
Enter the Value of Base: 2
Enter the Value of Exponent: 3
2.00 to the Power 3.00 is: 8.00
\end{verbatim}
\newpage

\subsection{X^y Without Using User Defined Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={X^y Without Using User Defined Function}]
#include <iostream>
using namespace std;
int main()
{
    double base, exp, i, result = 1;
    cout << "Enter the Value of Base: ";
    cin >> base;
    cout << "Enter the Value of Exponent: ";
    cin >> exp;
    for(i = 1; i <= exp; i++)
    {
        result = result * b;
    }
    cout << fixed;
    cout.precision(2);
    cout << base << " to the Power " << exp << " is: " << result << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input base=2, exp=3):}
\begin{verbatim}
Enter the Value of Base: 2
Enter the Value of Exponent: 3
2.00 to the Power 3.00 is: 8.00
\end{verbatim}
\newpage

\subsection{Passing Array to Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Passing Array to Function}]
#include <iostream>
using namespace std;
void display(int x[])
{
    int i;
    for(i = 0; i < 5; i++)
    {
        cout << x[i] << " ";
    }
}

int main()
{
    int num[5] = {10, 20, 30, 40, 50};
    display(num);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
10 20 30 40 50
\end{verbatim}
\newpage

\subsection{Maximum From Array Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Maximum From Array Using Function}]
#include <iostream>
using namespace std;
int maximum(int x[])
{
    int i, max = x[0];
    for(i = 1; i < 7; i++)
    {
        if(max < x[i])
        {
            max = x[i];
        }
    }
    return max;
}

int main()
{
    int num[7] = {10, 20, 30, 40, 50, 90, -20};
    int max = maximum(num);
    cout << "Maximum Number is: " << max << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Maximum Number is: 90
\end{verbatim}
\newpage

\subsection{Minimum From Array Using Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Minimum From Array Using Function}]
#include <iostream>
using namespace std;
int minimum(int x[])
{
    int i, min = x[0];
    for(i = 1; i < 7; i++)
    {
        if(min > x[i])
        {
            min = x[i];
        }
    }
    return min;
}

int main()
{
    int num[7] = {10, 20, 30, 40, 50, 90, -20};
    int min = minimum(num);
    cout << "Minimum Number is: " << min << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Minimum Number is: -20
\end{verbatim}
\newpage

\subsection{Passing String to Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Passing String to Function}]
#include <iostream>
#include <string>
using namespace std;
void display(string str)
{
    int i;
    for(i = 0; str[i] != '\0'; i++)
    {
        cout << str[i] << endl;
    }
}

int main()
{
    string str = "Mejbahul Alam";
    display(str);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
M
e
j
b
a
h
u
l

A
l
a
m
\end{verbatim}
\newpage

\subsection{Factorial Using Recursion}
\vspace{0.5cm}
\begin{lstlisting}[caption={Factorial Using Recursion}]
#include <iostream>
using namespace std;
int fact(int n)
{
    if(n == 1)
        return 1;
    else
        return n * fact(n - 1);
}

int main()
{
    int n;
    cout << "Enter an Integer Number: ";
    cin >> n;
    int result = fact(n);
    cout << "Factorial of " << n << " is: " << result;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input n=5):}
\begin{verbatim}
Enter an Integer Number: 5
Factorial of 5 is: 120
\end{verbatim}
\newpage

\section{Structure Programming Exercises}

\subsection{Structure}
\vspace{0.5cm}
\begin{lstlisting}[caption={Structure}]
#include <iostream>
using namespace std;
struct Person
{
    int age;
    float salary;
};

int main()
{
    Person per1, per2;
    per1.age = 27;
    per1.salary = 15750;
    cout << "Person 1" << endl;
    cout << "Age: " << per1.age << endl;
    cout << fixed;
    cout.precision(2);
    cout << "Salary: " << per1.salary << endl;
    per2.age = 25;
    per2.salary = 20000;
    cout << endl << "Person 2" << endl;
    cout << "Age: " << per2.age << endl;
    cout << "Salary: " << per2.salary;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Person 1
Age: 27
Salary: 15750.00

Person 2
Age: 25
Salary: 20000.00
\end{verbatim}
\newpage

\subsection{Input Structure Element}
\vspace{0.5cm}
\begin{lstlisting}[caption={Input Structure Element}]
#include <iostream>
using namespace std;
struct Person
{
    int age;
    float salary;
};

int main()
{
    Person per1, per2;
    cout << "Enter Information For Person 1:" << endl;
    cout << "Enter Age: ";
    cin >> per1.age;
    cout << "Enter Salary: ";
    cin >> per1.salary;
    cout << "Enter Information For Person 2:" << endl;
    cout << "Enter Age: ";
    cin >> per2.age;
    cout << "Enter Salary: ";
    cin >> per2.salary;
    cout << endl << endl << "Person 1" << endl;
    cout << "Age: " << per1.age << endl;
    cout << fixed;
    cout.precision(2);
    cout << "Salary: " << per1.salary << endl;
    cout << endl << "Person 2" << endl;
    cout << "Age: " << per2.age << endl;
    cout << "Salary: " << per2.salary;
    return 0;
}
\end{lstlisting}

\textbf{Output (for input per1: age=27, salary=15750; per2: age=25, salary=20000):}
\begin{verbatim}
Enter Information For Person 1:
Enter Age: 27
Enter Salary: 15750
Enter Information For Person 2:
Enter Age: 25
Enter Salary: 20000


Person 1
Age: 27
Salary: 15750.00

Person 2
Age: 25
Salary: 20000.00
\end{verbatim}
\newpage

\subsection{Initialize Structure Element Differently}
\vspace{0.5cm}
\begin{lstlisting}[caption={Initialize Structure Element Differently}]
#include <iostream>
using namespace std;
struct Person
{
    int age;
    float salary;
};

int main()
{
    Person per1 = {27, 270000};
    Person per2, per3;
    per2.age = 25;
    per2.salary = 15000;
    per3 = per2;
    cout << "Person 1" << endl;
    cout << "Age: " << per1.age << endl;
    cout << fixed;
    cout.precision(2);
    cout << "Salary: " << per1.salary << endl;
    cout << endl << "Person 2" << endl;
    cout << "Age: " << per2.age << endl;
    cout << "Salary: " << per2.salary << endl;
    cout << endl << "Person 3" << endl;
    cout << "Age: " << per3.age << endl;
    cout << "Salary: " << per3.salary;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Person 1
Age: 27
Salary: 270000.00

Person 2
Age: 25
Salary: 15000.00

Person 3
Age: 25
Salary: 15000.00
\end{verbatim}
\newpage

\subsection{Structure Comparison}
\vspace{0.5cm}
\begin{lstlisting}[caption={Structure Comparison}]
#include <iostream>
using namespace std;
struct Person
{
    int age;
    float sal;
};

int main()
{
    Person per1 = {27, 270000};
    Person per2, per3;
    per2.age = 25;
    per2.sal = 15000;
    per3 = per2;
    if(per1.age == per2.age && per1.sal == per2.sal)
        cout << "Person 1 is Equal to Person 2" << endl;
    else
        cout << "Person 1 is not Equal to Person 2" << endl;
    if(per2.age == per3.age && per2.sal == per3.sal)
        cout << endl << "Person 2 is Equal to Person 3";
    else
        cout << endl << "Person 2 is not Equal to Person 3";
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Person 1 is not Equal to Person 2

Person 2 is Equal to Person 3
\end{verbatim}
\newpage

\subsection{Array of Structure}
\vspace{0.5cm}
\begin{lstlisting}[caption={Array of Structure}]
#include <iostream>
using namespace std;
struct Person
{
    int age;
    float salary;
};

int main()
{
    Person per[4];
    int i;
    for(i = 0; i < 4; i++)
    {
        cout << "Enter Details for Person " << i + 1 << endl;
        cout << "Enter Age: ";
        cin >> per[i].age;
        cout << "Enter Salary: ";
        cin >> per[i].salary;
    }
    for(i = 0; i < 4; i++)
    {
        cout << endl << "Person " << i + 1 << endl;
        cout << "Age: " << per[i].age << endl;
        cout << fixed;
        cout.precision(2);
        cout << "Salary: " << per[i].salary << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input per[0]: age=27, salary=15750; per[1]: age=25, salary=20000; per[2]: age=30, salary=18000; per[3]: age=28, salary=17000):}
\begin{verbatim}
Enter Details for Person 1
Enter Age: 27
Enter Salary: 15750
Enter Details for Person 2
Enter Age: 25
Enter Salary: 20000
Enter Details for Person 3
Enter Age: 30
Enter Salary: 18000
Enter Details for Person 4
Enter Age: 28
Enter Salary: 17000

Person 1                                    Person 2
Age: 27                                     Age: 25
Salary: 15750.00                            Salary: 20000.00

Person 3                                    Person 4
Age: 30                                     Age: 28
Salary: 18000.00                            Salary: 17000.00
\end{verbatim}
\newpage

\subsection{Array Within Structure}
\begin{lstlisting}[caption={Array Within Structure}]
#include <iostream>
#include <string>
using namespace std;
struct Person{
    string name;
    int age;
    float salary;
};

int main(){
    Person per[4];
    int i;
    cin.ignore(1, '\n');
    for(i = 0; i < 4; i++){
        cout << "Enter Details for Person " << i + 1 << endl;
        cout << "Enter Name: ";
        getline(cin, per[i].name);
        cout << "Enter Age: ";
        cin >> per[i].age;
        cout << "Enter Salary: ";
        cin >> per[i].salary;
        cin.ignore(1, '\n');
        cout << endl;
    }
    for(i = 0; i < 4; i++){
        cout << endl << "Person " << i + 1 << endl;
        cout << "Name: " << per[i].name << endl;
        cout << "Age: " << per[i].age << endl;
        cout << fixed;
        cout.precision(2);
        cout << "Salary: " << per[i].salary << endl;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input per[0]: name="Mejbahul", age=27, salary=15750; per[1]: name="Fatihul", age=25, salary=20000; per[2]: name="Alam", age=30, salary=18000; per[3]: name="Chowdhury", age=28, salary=17000):}
\begin{verbatim}
Enter Details for Person 1          Enter Details for Person 2
Enter Name: Mejbahul                Enter Name: Fatihul
Enter Age: 27                       Enter Age: 25
Enter Salary: 15750                 Enter Salary: 20000

Enter Details for Person 3          Enter Details for Person 4
Enter Name: Alam                    Enter Name: Chowdhury
Enter Age: 30                       Enter Age: 28
Enter Salary: 18000                 Enter Salary: 17000

Person 1                            Person 2
Name: Mejbahul                      Name: Fatihul
Age: 27                             Age: 25
Salary: 15750.00                    Salary: 20000.00

Person 3                            Person 4
Name: Alam                          Name: Chowdhury
Age: 30                             Age: 28
Salary: 18000.00                    Salary: 17000.00
\end{verbatim}
\newpage

\subsection{Passing Structure Variable to Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Passing Structure Variable to Function}]
#include <iostream>
#include <string>
using namespace std;
struct Person
{
    string name;
    int age;
    float salary;
};

void display(Person p)
{
    cout << "Name: " << p.name << endl;
    cout << "Age: " << p.age << endl;
    cout << fixed;
    cout.precision(2);
    cout << "Salary: " << p.salary << endl;
}
int main()
{
    Person per1;
    per1.name = "Mejabhul Alam";
    per1.age = 25;
    per1.salary = 22222.30;
    display(per1);
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Name: Mejabhul Alam
Age: 25
Salary: 22222.30
\end{verbatim}
\newpage

\section{Union Programming Exercises}

\subsection{Union}
\vspace{0.5cm}
\begin{lstlisting}[caption={Union}]
#include <iostream>
using namespace std;
union test
{
    int x, y;
};

int main()
{
    test p1;
    p1.x = 10;
    cout << "P1.x = " << p1.x << endl;
    cout << "P1.y = " << p1.y << endl;
    p1.y = 23;
    cout << endl << "P1.x = " << p1.x << endl;
    cout << "P1.y = " << p1.y << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
P1.x = 10
P1.y = 10

P1.x = 23
P1.y = 23
\end{verbatim}
\newpage

\subsection{Size of Union}
\vspace{0.5cm}
\begin{lstlisting}[caption={Size of Union}]
#include <iostream>
using namespace std;
union test1
{
    int x, y;
};
union test2
{
    char ch;
    int x;
};
union test3
{
    char name[20];
    double y;
};

int main()
{
    test1 s1;
    test2 s2;
    test3 s3;
    cout << "Size of Test 1 = " << sizeof(s1) << endl;
    cout << "Size of Test 2 = " << sizeof(s2) << endl;
    cout << "Size of Test 3 = " << sizeof(s3) << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Size of Test 1 = 4
Size of Test 2 = 4
Size of Test 3 = 20
\end{verbatim}
\newpage

\subsection{Enumeration}
\vspace{0.5cm}
\begin{lstlisting}[caption={Enumeration}]
#include <iostream>
using namespace std;
enum days_of_week
{
    Sun, Mon, Tue, Wed, Thu, Fri, Sat
};

int main()
{
    days_of_week day1, day2;
    day1 = Tue;
    day2 = Wed;
    int dif = day2 - day1;
    cout << "Day 1 = " << day1 << endl;
    cout << "Day Difference = " << dif << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Day 1 = 2
Day Difference = 1
\end{verbatim}
\newpage

\subsection{Type Definition Using typedef}
\vspace{0.5cm}
\begin{lstlisting}[caption={Type Definition Using typedef}]
#include <iostream>
using namespace std;
int main()
{
    typedef char Letter;
    Letter ch1;
    ch1 = 'A';
    cout << "Character is: " << ch1 << endl;
    Letter ch2;
    ch2 = 'B';
    cout << "Character is: " << ch2 << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Character is: A
Character is: B
\end{verbatim}
\newpage

\subsection{Type Definition Using typedef in Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Type Definition Using typedef in Function}]
#include <iostream>
#include <string>
using namespace std;
struct book
{
    string name;
    int price;
};

int main()
{
    typedef book B;
    B x = {"Mejbahul Alam", 350};
    cout << "Book Name = " << x.name << endl;
    cout << "Book Price = " << x.price << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Book Name = Mejbahul Alam
Book Price = 350
\end{verbatim}
\newpage

\section{Pointer Programming Exercises}

\subsection{Pointer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Pointer}]
#include <iostream>
using namespace std;
int main()
{
    int x = 0;
    int *p;
    p = &x;
    cout << "Value of x = " << x << endl;
    cout << "Address of x = " << &x << endl;
    cout << "Pointer of p = " << p << endl;
    cout << "Content of p = " << *p << endl;
    cout << "Address of p = " << &p << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output (addresses are platform-dependent):}
\begin{verbatim}
Value of x = 0
Address of x = [some address, e.g., 0x7ffee4f0]
Pointer of p = [same address, e.g., 0x7ffee4f0]
Content of p = 0
Address of p = [different address, e.g., 0x7ffee4e8]
\end{verbatim}
\newpage

\subsection{Pointer Pointing to Different Variable}
\vspace{0.5cm}
\begin{lstlisting}[caption={Pointer Pointing to Different Variable}]
#include <iostream>
using namespace std;
int main()
{
    int x = 10, y = 20, z = 30;
    int *p;
    p = &x;
    cout << "x = " << *p << endl;
    p = &y;
    cout << "y = " << *p << endl;
    p = &z;
    cout << "z = " << *p << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
x = 10
y = 20
z = 30
\end{verbatim}
\newpage

\subsection{Adding 2 Numbers Using Pointer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Adding 2 Numbers Using Pointer}]
#include <iostream>
using namespace std;
int main()
{
    int x = 10, y = 20, sum;
    int *p1;
    int *p2;
    p1 = &x;
    p2 = &y;
    sum = *p1 + *p2;
    cout << "The Sum is: " << sum << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
The Sum is: 30
\end{verbatim}
\newpage

\subsection{Swapping 2 Numbers Using Pointer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Swapping 2 Numbers Using Pointer}]
#include <iostream>
using namespace std;
int main()
{
    int x = 10, y = 20, temp;
    int *p1;
    int *p2;
    p1 = &x;
    p2 = &y;
    temp = *p1;
    *p1 = *p2;
    *p2 = temp;
    cout << "x: " << x << endl;
    cout << "y: " << y << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
x: 20
y: 10
\end{verbatim}
\newpage

\subsection{Swapping 2 Numbers Using Pointer \& Function}
\vspace{0.5cm}
\begin{lstlisting}[caption={Swapping 2 Numbers Using Pointer & Function}]
#include <iostream>
using namespace std;
void swapping(int *p1, int *p2)
{
    int temp;
    temp = *p1;
    *p1 = *p2;
    *p2 = temp;
}

int main()
{
    int x = 10, y = 20;
    cout << "Before Swapping: x = " << x << " & y = " << y << endl;
    swapping(&x, &y);
    cout << endl << "After Swapping: x = " << x << " & y = " << y << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Swapping: x = 10 & y = 20

After Swapping: x = 20 & y = 10
\end{verbatim}
\newpage

\subsection{Access Array Elements Using Pointer}
\vspace{0.5cm}
\begin{lstlisting}[caption={Access Array Elements Using Pointer}]
#include <iostream>
using namespace std;
int main()
{
    int a[5] = {10, 20, 30, 40, 50};
    int *p, i;
    p = &a[0];
    for(i = 0; i < 5; i++)
    {
        cout << *p << endl;
        p++;
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
10
20
30
40
50
\end{verbatim}
\newpage

\subsection{Pass by Pass Value}
\vspace{0.5cm}
\begin{lstlisting}[caption={Pass by Pass Value}]
#include <iostream>
using namespace std;
void modify(int num)
{
    num = 20;
}

int main()
{
    int num = 10;
    cout << "Before Modification: " << num << endl;
    modify(num);
    cout << "After Modification: " << num << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Modification: 10
After Modification: 10
\end{verbatim}
\newpage

\subsection{Pass by Pass Reference}
\vspace{0.5cm}
\begin{lstlisting}[caption={Pass by Pass Reference}]
#include <iostream>
using namespace std;
void modify(int *ptr)
{
    *ptr = 20;
}

int main()
{
    int num = 10;
    cout << "Before Modification: " << num << endl;
    modify(&num);
    cout << "After Modification: " << num << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Before Modification: 10
After Modification: 20
\end{verbatim}
\newpage

\section{File Programming Exercises}

\subsection{File Create \& Close}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Create \& Close}]
#include <iostream>
#include <fstream>
using namespace std;
int main()
{
    ofstream file;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
File is Open
\end{verbatim}
\newpage

\subsection{File Write 'w' Using fputc()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Write 'w' Using fputc()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name = "Mejbahul Alam";
    int length = name.length();
    int i;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open";
        for(i = 0; i < length; i++)
        {
            file << name[i];
        }
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
File is Open

File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Write 'r' Using fputc()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Write 'r' Using fputc()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name = "Mejbahul Alam";
    int length = name.length();
    int i;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open";
        for(i = 0; i < length; i++)
        {
            file << name[i];
        }
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
File is Open

File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Add Write 'a' Using fputc()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Add Write 'a' Using fputc()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name = "Mejbahul Alam";
    int length = name.length();
    int i;
    file.open("test.txt", ios::app);
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open";
        for(i = 0; i < length; i++)
        {
            file << name[i];
        }
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
File is Open

File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Write 'w' Using fputs()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Write 'w' Using fputs()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        cout << "Enter Your Full Name: ";
        getline(cin, name);
        file << name;
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input name="Mejbahul Alam"):}
\begin{verbatim}
File is Open
Enter Your Full Name: Mejbahul Alam


File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Write 'a' Using fputs()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Write 'a' Using fputs()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name;
    file.open("test.txt", ios::app);
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        cout << "Enter Your Full Name: ";
        getline(cin, name);
        file << name << endl;
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input name="Mejbahul Alam"):}
\begin{verbatim}
File is Open
Enter Your Full Name: Mejbahul Alam


File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Write 'a' Using fprintf()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Write 'a' Using fprintf()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name;
    int age;
    file.open("test.txt", ios::app);
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        cout << "Enter Your Full Name: ";
        getline(cin, name);
        cout << "Enter Your Age: ";
        cin >> age;
        file << "Name: " << name << ", Age: " << age << endl;
        cout << endl << endl << "File is Written Successfully";
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input name="Mejbahul Alam", age=25):}
\begin{verbatim}
File is Open
Enter Your Full Name: Mejbahul Alam
Enter Your Age: 25


File is Written Successfully
\end{verbatim}
\newpage

\subsection{File Read 'r' Using fgetc()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Read 'r' Using fgetc()}]
#include <iostream>
#include <fstream>
using namespace std;
int main()
{
    ifstream file;
    char ch;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        while(file.get(ch))
        {
            cout << ch;
        }
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (assuming test.txt contains "Mejbahul Alam"):}
\begin{verbatim}
File is Open
Mejbahul Alam
\end{verbatim}
\newpage

\subsection{File Read 'r' Using fgets()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Read 'r' Using fgets()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ifstream file;
    string ch;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        while(getline(file, ch))
        {
            cout << endl << ch << endl;
        }
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (assuming test.txt contains "Mejbahul Alam"):}
\begin{verbatim}
File is Open

Mejbahul Alam

\end{verbatim}
\newpage

\subsection{File Read 'r' Using fscanf()}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Read 'r' Using fscanf()}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ifstream file;
    string ch;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        while(file >> ch)
        {
            cout << ch << " ";
        }
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (assuming test.txt contains "Mejbahul Alam"):}
\begin{verbatim}
File is Open
Mejbahul Alam
\end{verbatim}
\newpage

\subsection{File Read 'r' Using fscanf() (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={File Read 'r' Using fscanf() (Method 2)}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ifstream file;
    string ch1, ch2, ch3, ch4;
    int age;
    file.open("test.txt");
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Open" << endl;
        getline(file, ch1);
        cout << ch1;
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (assuming test.txt contains "Name: Mejbahul Alam, Age: 25"):}
\begin{verbatim}
File is Open
Name: Mejbahul Alam, Age: 25
\end{verbatim}
\newpage

\subsection{Preprocessor - \#define}
\vspace{0.5cm}
\begin{lstlisting}[caption={Preprocessor - \#define}]
#include <iostream>
using namespace std;
#define name "Mejbahul Alam Chowdhury"
int main()
{
    cout << name << endl;
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Mejbahul Alam Chowdhury
\end{verbatim}
\newpage

\subsection{Preprocessor - \#define (Method 2)}
\vspace{0.5cm}
\begin{lstlisting}[caption={Preprocessor - \#define (Method 2)}]
#include <iostream>
using namespace std;
#define lu cout << "Leading University" << endl;
int main()
{
    lu
    lu
    return 0;
}
\end{lstlisting}

\textbf{Output:}
\begin{verbatim}
Leading University
Leading University
\end{verbatim}
\newpage

\subsection{Storing Student Details}
\vspace{0.5cm}
\begin{lstlisting}[caption={Storing Student Details}]
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ofstream file;
    string name;
    int age, phone, n, i;
    file.open("student.txt", ios::app);
    if(!file)
    {
        cout << "File Doesn't Exist";
    }
    else
    {
        cout << "File is Opened" << endl;
        cout << "Enter Number of Students: ";
        cin >> n;
        cin.ignore(1, '\n');
        for(i = 1; i <= n; i++)
        {
            cout << "Enter Student Name: ";
            getline(cin, name);
            cout << "Enter Student Age: ";
            cin >> age;
            cout << "Enter Student Phone: ";
            cin >> phone;
            cin.ignore(1, '\n');
            file << endl << name << "\t\t" << age << "\t\t" << phone << endl;
        }
        file.close();
    }
    return 0;
}
\end{lstlisting}

\textbf{Output (for input n=2, student1: name="Mejbahul", age=25, phone=1234567890; student2: name="Fatihul", age=23, phone=0987654321):}
\begin{verbatim}
File is Opened
Enter Number of Students: 2
Enter Student Name: Mejbahul
Enter Student Age: 25
Enter Student Phone: 1234567890
Enter Student Name: Fatihul
Enter Student Age: 23
Enter Student Phone: 0987654321
\end{verbatim}
\newpage


\section{Conclusion}
This document has presented a comprehensive set of C++ programming exercises covering various topics. Each program is designed to help learners practice and understand key programming concepts. To see the output of each program, compile and run them using a C compiler. For additional assistance or further exercises, contact the document author.


\end{document}
